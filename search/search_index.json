{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>NIST-JARVIS homepage https://jarvis.nist.gov/.</p> <p>This project is a part of Materials-genome initiative at NIST.</p> <p>JARVIS (Joint Automated Repository for Various Integrated Simulations) is a  repository designed to automate materials discovery and optimization using:</p> <ul> <li>Classical force-field,</li> <li>Density functional theory, </li> <li>Machine learning calculations and </li> <li>Experiments. </li> </ul> <p>Find more details https://www.nature.com/articles/s41524-020-00440-1 .</p> <p></p>"},{"location":"jarvisapi/","title":"API","text":""},{"location":"jarvisapi/#overview","title":"Overview","text":"<p>JARVIS-API is a Django-REST API framework for uploading and downloading data from NIST-JARVIS. A user can request an account through the web-interface to access a large and diverse amount of materials-data. Click on the Log In/Sign Up button. The data is generated from several JARVIS resources  such as JARVIS-DFT, JARVIS-FF, and JARVIS-ML etc. A user can also upload there own data using the API.  Materials data can be uploaded in XML format or as binary blob files. The XML files are converted to HTML pages using XSLT. XML upload requires a corresponding XSD file schema, but the blob uploads are possible without any fixed schema. JARVIS-API can be used either using command line or using the web-interface. For beginners we recommend using the web-interface for uploading and downloading data. </p>"},{"location":"jarvisapi/#methodology","title":"Methodology","text":"<ul> <li> <p>A user can send GET/POST requests to the JARVIS-API using the tools provided here: REST-API</p> </li> <li> <p>A user should upload using the Data Curation button on the web and select a particular template.  If you need a custom made template, you can send an email to Contact.</p> </li> <li> <p>There are several modules available right now to interact with the API such as: get XML data using ID, post text queries, upload files, delete your documents etc.</p> </li> <li> <p>After curating the data, you can find it using Data Exploration.</p> </li> </ul>"},{"location":"jarvisapi/#references","title":"References","text":"<ol> <li>JARVIS: An Integrated Infrastructure for Data-driven Materials Design, arXiv:2007.01831 (2020).</li> </ol>"},{"location":"jarvisdft/","title":"DFT","text":""},{"location":"jarvisdft/#overview","title":"Overview","text":"<p>JARVIS-DFT is a density functional theory-based database for ~40000 3D,  ~1000 2D materials and around a million calculated properties. JARVIS-DFT mainly uses vdW-DF-OptB88  functional for geometry optimization. It also uses beyond-GGA approaches, including  Tran-Blaha modified Becke-Johnson (TBmBJ) meta-GGA, PBE0, HSE06, DMFT, G0W0 for analyzing selective cases.  In addition to hosting conventional properties such as formation energies, bandgaps, elastic constants,  piezoelectric constants, dielectric constants, and magnetic moments, it also contains unique datasets,  such as exfoliation energies for van der Waals bonded materials, spin-orbit coupling spillage,  improved meta-GGA bandgaps, frequency-dependent dielectric function, spin-orbit spillage,  spectroscopy limited maximum efficiency (SLME), infrared (IR) intensities, electric field gradient (EFG),  heterojunction classifications, and Wannier tight-binding Hamiltonians.  These datasets are compared to experimental results wherever possible, to evaluate their accuracy as predictive tools.  JARVIS-DFT introduces protocols such as automatic k-point convergence that can be critical for  obtaining precise and accurate calculation results. </p> <p>Table. A brief summary of datasets available in the JARVIS-DFT.</p> Material classes Numbers 3D-bulk 33482 2D-bulk 2293 1D-bulk 235 0D-bulk 413 2D-monolayer 1105 2D-bilayer 102 Molecules 12 Heterostructure 3 Total DFT calculated systems 37646 <p>Table. A brief summary of functionals used in optimizing crystal geometry in the JARVIS-DFT.</p> Functionals Numbers vdW-DF-OptB88 (OPT) 37646 vdW-DF-OptB86b (MK) 109 vdW-DF-OptPBE (OR) 111 PBE 99 LDA 92 <p>Table. A brief summary of material-properties available in the JARVIS-DFT. The database is continuously expanding.</p> JARVIS-DFT Properties Numbers Optimized crystal-structure (OPT) 37646 Formation-energy (OPT) 37646 Bandgap (OPT) 37646 Exfoliation energy (OPT) 819 Bandgap (TBmBJ) 15655 Bandgap (HSE06) 40 Bandgap (PBE0) 40 Bandgap (G0W0) 15 Bandgap (DMFT) 11 Frequency dependent dielectric tensor (OPT) 34045 Frequency dependent dielectric tensor (TBmBJ) 15655 Elastic-constants (OPT) 15500 Finite-difference phonons at \u0413-point (OPT) 15500 Work-function, electron-affinity (OPT) 1105 Theoretical solar-cell efficiency (SLME) (TBmBJ) 5097 Topological spin-orbit spillage (PBE+SOC) 11500 Wannier tight-binding Hamiltonians (PBE+SOC) 1771 Seebeck coefficient (OPT, BoltzTrap) 22190 Power factor (OPT, BoltzTrap) 22190 Effective mass (OPT, BoltzTrap) 22190 Magnetic moment (OPT) 37528 Piezoelectric constant (OPT, DFPT) 5015 Dielectric tensor (OPT, DFPT) 5015 Infrared intensity (OPT, DFPT) 5015 DFPT phonons at \u0413-point (OPT) 5015 Electric field gradient (OPT) 15187 Non-resonant Raman intensity (OPT, DFPT) 250 Scanning tunneling microscopy images (PBE+SOC) 770"},{"location":"jarvisdft/#methodology","title":"Methodology","text":""},{"location":"jarvisdft/#input-structure","title":"Input structure","text":"<p>The initial/input crystal structures were obtained from the Inorganic Crystal Structure Database,  Materials Project, OQMD, AFLOW, COD databases. These input structures are then subjected to a set  of geometric and electronic optimizations (discussed below) following JARVIS-DFT workflow protocols.  After the geometric optimization, several materials properties are calculated .</p> <pre><code># Make sure JARVIS_VASP_PSP_DIR is correctly set for VASP pseudopotentials.\nfrom jarvis.io.vasp.inputs import Poscar\nfrom jarvis.tasks.vasp.vasp import JobFactory\np = Poscar.from_file(\"POSCAR\")\nprint (p)\nJobFactory().all_optb88vdw_props(mat=p)\n\n</code></pre>"},{"location":"jarvisdft/#geometric-optimzation","title":"Geometric optimzation","text":"<p>DFT calculations were carried out using the Vienna Ab-initio simulation package (VASP) software using the workflow given on our JARVIS-Tools github page (https://github.com/usnistgov/jarvis).  We use the projected augmented wave method . Both the internal atomic positions and the lattice constants are  allowed to relax in spin-unrestricted calculations until the maximal residual Hellmann\u2013Feynman forces on atoms  are smaller than 0.001 eV \u00c5\u22121 and energy-tolerance of 10-7 eV with accurate precision setting (PREC=Accurate).  Note that force convergence is important for properties such as phonons, elastic constants etc.  We use spin-polarized set-up with initial magnetic moment of default value 1 muB during geometric optimization.  Also use conjugate gradient algorithm for ionic relaxation (IBRION=2). </p>"},{"location":"jarvisdft/#functional-selection","title":"Functional selection","text":"<p>We mainly use OptB88vdW method for our calculations, but we also carryout local density approximation (LDA)  and generalized gradient approximation with Perdew-Burke-Ernzerhof (GGA-PBE)-based calculations for benchmarking purposes.  OptB88vdW functional, has been shown to gives accurate lattice parameters for both van der Waals (vdW) and non-vdW solids.  TBmBJ potential is used as a meta-GGA method for better predicting the bandgaps and dielectric function of a material on the  OptB88vdW optimized cell.</p> <pre><code>from jarvis.tasks.vasp.vasp import GenericIncars\npbe = GenericIncars().pbe()\noptb88vdw = GenericIncars().optb88vdw()\nlda = GenericIncars().lda()\n</code></pre>"},{"location":"jarvisdft/#k-point-and-cut-off-convergence","title":"K-point and cut-off convergence","text":"<p>We use the Monkhorst-Pack scheme to generate k-points, but after the generation,  the grid is shifted so that one of the k-points lies on the \u0413-point. We included  the gamma-point because we were interested in computing quantities that require  gamma-point contribution, such as optical transition for our optoelectronic database,  gamma-point phonons for our elastic properties, finding multiferroic materials  which have negative phonons at the gamma-point. The k-points are continuously  stored in memory, to check that each of the new k-points generated by equation is unique.  The k-points line density starts from length 0, with \u0413-point being the only  k-point and is increased by 5 \u00c5 at each successive iteration if the difference  between the energy computed with the new k-points and the one computed with  previous k-points is more than the tolerance. After the convergence with a  particular tolerance, we compute five extra points to further ensure the  convergence. This procedure is repeated until convergence is found for all  5 extra points. A similar convergence procedure is carried out for the plane  wave cut-off until the energy difference between successive iterations is   less than the tolerance for 6 successive points. The plane wave cut-off is   increased by 50 eV each time, starting from 500 eV. In both convergence procedures,   we perform only single step electronic relaxation, i.e. no ionic relaxation is   considered. When starting the cut-off energy convergence, we used a minimal  k-point length of 10 \u00c5. Similarly, for the k-point convergence we started with a   cut-off of 500 eV. We used Gaussian smearing (with 0.01 eV parameter) which is   recommended by several DFT codes, because it is less sensitive than other methods   to determine partial occupancies for each orbital. This leads to an easier DFT-SCF   convergence, especially when the materials are not apriori known to be a metal or   insulator, which is always the case in this work. However, it is to be emphasized   that, in principle, k-points and smearing parameters should be converged together,   but this requires a very computationally expensive workflow. For this reason,   we choose to converge k-points and cut-off only. In addition to the above   convergence procedure, we further increase the cut-off by 30% for elastic,   dielectric and electric field gradient, piezoelectric tensors as the volume and   shape of the material may change during the distortions.</p> <pre><code>optb88 = GenericIncars().optb88vdw()\njob = JobFactory(use_incar_dict=optb88.incar, pot_type=optb88.pot_type)\nencut = job.converg_encut(mat=mat)\nlength = job.converg_kpoint(mat=mat)\nenergy, contcar_path = job.optimize_geometry(\n            mat=mat, encut=encut, length=length\n)\n</code></pre>"},{"location":"jarvisdft/#dftu","title":"DFT+U","text":"<p>DFT+U corrections are used only for special cases because it is somewhat tricky  to get formation energies from the total energies obtained from such calculations.  DFT+U calculations are used during magnetic topologic insulator search cases mainly.  We generally use U=3.0 eV or complete U-scan (0 to 3 eV) for enumerating the effects  of U-parameter. </p> <pre><code>from jarvis.io.vasp.inputs import find_ldau_magmom\natoms=Atoms.from_poscar('POSCAR')\nld_soc = find_ldau_magmom(atoms=atoms,lsorbit=True)\nld_nonsoc = find_ldau_magmom(atoms=atoms,lsorbit=False)\n\n</code></pre>"},{"location":"jarvisdft/#spin-orbit-coupling","title":"Spin-orbit coupling","text":"<p>Spin-orbit coupling usually split states that are degenerate in a nonrelativistic description.  We consider spin-orbit coupling (LSORBIT = .TRUE.) only during spin-orbit spillage calculations  for topological materials but not during geometric optimization or any other major property calculations.  We take into account only scalar relativistic effects. Accurate lattice-constants of materials with  vdW bonding can play a critical role in predicting the correct topology, as emphasized. We calculate  the spillage using the Perdew, Burke and Ernzerhof (PBE) functional and 1000/atom k-points, as well as  by analyzing the spillage along a high-symmetry Brillouin-zone path, with a 600 eV plane-wave cut-off.</p>"},{"location":"jarvisdft/#beyond-dft-methods","title":"Beyond DFT methods","text":"<p>JARVIS-DFT contains data using conventional local and semi-local methods, as well as beyond conventional  DFT based methods such as meta-GGA (TBmBJ), G0W0, HSE06, PBE0, DMFT etc. BDFT methods are used to  better predict electronic bandgaps, dielectric functions hence solar-cell efficiencies, as well  magnetic moment (using DMFT) of a material. HSE06 and PBE0 were used to predict accurate bandgaps  for exfoliable bulk and corresponding monolayer materials. We utilized two hybrid functionals: PBE0 and  HSE06. In PBE0 the exchange energy is given by a 3:1 ratio mix of the PBE and Hartree\u2013Fock exchange  energies, respectively, while the correlation is completely given by the PBE correlation energy.  In HSE (Heyd\u2013Scuseria\u2013Ernzerhof), the exchange is given by a screened Coulomb potential, to improve  computational efficiency. An adjustable parameter (\u03c9) controls how short range the interaction is.  HSE06 is characterized by \u03c9=0.2, while for a choice of \u03c9=0 HSE becomes PBE0.</p>"},{"location":"jarvisdft/#density-functional-perturbation-theory","title":"Density functional perturbation theory","text":"<p>We carry out the Density functional perturbation theory (DFPT)  (as implemented in the VASP code, IBRION=8) calculation on the standard conventional cell  for each material. We determine the Born-effective charge, piezoelectric and dielectric  (ionic+electronic parts) tensors and the phonon eigenvectors. DFPT is also used to  calculate Infrared and Raman intensities for selected materials. As mentioned earlier,  it is important to converge K-points, cut-off and parameters to get reliable results  which is taken into account in the JARVIS-DFT.</p>"},{"location":"jarvisdft/#finite-difference-method","title":"Finite-difference method","text":"<p>The elastic tensor is determined by performing six finite distortions of  the lattice and deriving the elastic constants from the strain-stress relationship.  In addition to elastic tensor, the finite difference (IBRION=6) method used predicts  the phonons at gamma-point for the conventional cell used.</p>"},{"location":"jarvisdft/#linear-optics","title":"Linear Optics","text":"<p>To obtain the optical properties of the materials, we calculated the imaginary part  of the dielectric function from the Bloch wavefunctions and eigenvalues (neglecting  local field effects) (LOPTICS=.TRUE.). We introduced three times as many empty conduction  bands as valance bands. This treatment is necessary to facilitate proper electronic transitions.  We choose 5000 energy grid points to have a sufficiently high resolution in dielectric function spectra.  Several properties such as absorption coefficient, solar-cell efficiency, and reflectivity can be  predicted with the dielectric function data. Note that due to bandgap underestimation the peaks may  beshifted. A better method such as TBmBJ, HSE06, G0W0 is necessary for predicting better behavior.</p>"},{"location":"jarvisdft/#wannierization","title":"Wannierization","text":"<p>We use Wannier90 to construct Maximally-Localized Wannier Functions (MLWF) based TB-Hamiltonians.  For the case of interest in this work, where we wish to describe both the valence and conduction  bands near the Fermi level, it is necessary to first select a set of bands to Wannierize,  which includes separating the conduction bands from the free-electron-like bands that generally  overlap with them in energy. The procedure to determine this localized subspace of Bloch  wavefunctions proceeds similarly to minimization described above, where after an initial guess,  the subspace is iteratively updated in order to minimize the spread function. After this initial  disentanglement step, the Wannierization of the selected subspace proceeds as described above.  Due to the iterative non-linear minimization employed during both the disentanglement and  Wannierization steps, the localization and utility of the final Wannier functions depend  in practice on the initial choice of orbitals that are used to begin the disentanglement procedure,  and which are then used as the initial guess for the Wannierization. Our initial guesses consist  of a set of atomic orbitals we have chosen to describe all the chemically relevant orbitals  for each element in typical elemental systems and compounds.</p> <p>During the disentanglement step, it is possible to choose an energy range that is included exactly  (\u201cthe frozen window\u201d), with the result that the Wannier band structure will exactly match the DFT  band structure in this energy range and at the grid of k-points used in the Wannierization.  We use a frozen window of \u00b1 2 eV around the Fermi-energy. This window ensures that bands near  the Fermi level are well described by the WTBH. For cases where the original WFs were unsatisfactory  (see below), we found that lowering the lower bound of this window to include all of the valence bands  often improves that WTBH, which we use as a second Wannierization setting. In order to validate our WTBH,  we calculate the maximum absolute difference (\u03bc) between the Wannier and DFT eigenvalues within an energy  range of \u00b1 2eV around the Fermi level.</p> <p>A weakness of this evaluation method is that highly dispersive energy bands (high (dE_nk)/dk)  can result in high \u03bc values even if the WTBH is of good quality because any slight shift in the  k-direction of a dispersive band will result in a large energy error. We consider that systems with  \u03bc less than 0.1 eV to useful for most applications, and we provide data for the user to evaluate  individual WTBH for their own applications.</p> <pre><code>from jarvis.io.wannier.inputs import Wannier90win\nbox = [[2.715, 2.715, 0], [0, 2.715, 2.715], [2.715, 0, 2.715]]\ncoords = [[0, 0, 0], [0.25, 0.25, 0.25]]\nelements = [\"Si\", \"Si\"]\nSi = Atoms(lattice_mat=box, coords=coords, elements=elements)\nWannier90win(struct=Si, efermi=0.0).write_win(name=win)\n\n</code></pre>"},{"location":"jarvisdft/#boltzmann-transport","title":"Boltzmann transport","text":"<p>The transport properties were calculated using the Boltzmann transport equation (BTE)  implemented in the BoltzTrap code. The BTE is used to investigate the non-equilibrium  behavior of electrons and holes by statistically averaging all possible quantum states.  The computation of the relaxation time is very computationally expensive,  especially in a high-throughput context, hence a constant relaxation time approach is used here.</p> <pre><code>from jarvis.tasks.boltztrap.run import run_boltztrap\npath = 'xyz'\nrun_boltztrap(path)\n</code></pre>"},{"location":"jarvisdft/#partial-charge-density","title":"Partial charge density","text":"<p>The partial charge densities are used to calculate scanning tunneling microscopy images.  The surface charge and probability densities are calculated by integrating the local density  of states function (ILDOS) over an energy range of \u00b10.5 eV from the conduction band minima (CBM) to  Fermi energy (EF) and valence band maxima (VBM) to Fermi energy (EF). The STM images are calculated  using Tersoff-Hamann approach.</p>"},{"location":"jarvisdft/#property-details","title":"Property Details","text":""},{"location":"jarvisdft/#atomic-structure-and-derived-properties","title":"Atomic structure and derived properties","text":"<p>After obtaining the initial structures from several databases, we optimize following  JARVIS-DFT protocols of a) converging k-points, b) converging cut-off, c)  converging energy, d) converging forces. These final optimized structures are analyzed in  terms of scalar quantities such as density, volume etc. as well as statistical functions  such as radial distribution function, angular distribution function, dihedral distribution function,  X-ray diffraction pattern etc. to know about the local atomisitic environments that controls several material-properties.</p> <pre><code>from jarvis.core.atoms import Atoms\nfrom jarvis.analysis.structure.neighbors import NeighborsAnalysis\nfrom jarvis.ai.descriptors.cfid import CFID\nfrom jarvis.analysis.diffraction.xrd import XRD\nfrom jarvis.analysis.structure.spacegroup import Spacegroup3D\n\nbox = [[2.715, 2.715, 0], [0, 2.715, 2.715], [2.715, 0, 2.715]]\ncoords = [[0, 0, 0], [0.25, 0.25, 0.25]]\nelements = [\"Si\", \"Si\"]\natoms = Atoms(lattice_mat=box, coords=coords, elements=elements)\ndensity = round(density,2)\n\n\nspg = Spacegroup3D(atoms)\nprim_atoms = spg.primitive_atoms\nconv_atoms = spg.conventional_standard_structure\nspg_numb = spg.space_group_number\ncrys_system = spg.crystal_system\nconv_params = conv_atoms.lattice.parameters\n\npacking_fr = round(atoms.packing_fraction, 3)\n\nnbr = NeighborsAnalysis(atoms)\nrdf_bins, rdf_hist, nn = nbr.get_rdf()\nnbr = NeighborsAnalysis(atoms, max_cut=10.0)\nang1_hist, ang1_bins = nbr.ang_dist_first()\nang2_hist, ang2_bins = nbr.ang_dist_second()\ndhd_hist, dhd_bins = nbr.get_ddf()\n\ntwo_thetas, d_hkls, intensities = XRD().simulate(atoms=atoms)\n\ncfid = CFID(atoms).get_comp_descp()\n\n</code></pre>"},{"location":"jarvisdft/#formation-energy","title":"Formation energy","text":"<p>The enthalpy of formation is the standard reaction enthalpy for the formation of the  compound from its elements (atoms or molecules) in their most stable reference states.  We report formation energies at 0K only based on energies directly obtained from the DFT  especially with OptB88vdW functional. We have calculated the elemental energies  (in respective crystalline forms) and treat those energies as the chemical potential.  These chemical potentials are subtracted from the total energies of the system to predict the  formation energies. If functional other than OptB88vdW is used then the unary energy needs to be provided.</p> <pre><code>from jarvis.analysis.thermodynamics.energetics import form_enp\ntotal_energy = -9.974648\nfen = form_enp(atoms=atoms, total_energy=total_energy)\n</code></pre>"},{"location":"jarvisdft/#exfoliation-energies","title":"Exfoliation energies","text":"<p>The exfoliation energy for 2D materials is computed as the energy difference per atom for bulk and monolayer systems.</p>"},{"location":"jarvisdft/#defect-formation-energies","title":"Defect formation energies","text":"<p>Defect formation energies are available for a few 2D materials. For neutral defect  formation energies, we generate a at least 11 Angs. Cell for 2D materials and create  point defects using unique Wyckoff information. The total energy of the defect system,  the energy of the perfect 2D crystal and the elemental chemical potential is then used to  predict the defect formation energies. Currently this property is available for OptB88vdW functional only.</p> <pre><code>from jarvis.analysis.thermodynamics.energetics import get_twod_defect_energy\nfrom jarvis.io.vasp.outputs import Vasprun\ntmp_xml=os.path.join(os.path.dirname(__file__), \"JVASP-667_C_C_c.xml\")\nvrun=Vasprun(tmp_xml)\nEf=get_twod_defect_energy(vrun=vrun,jid=\"JVASP-667\",atom=\"C\")\n</code></pre>"},{"location":"jarvisdft/#electronic-density-of-density-of-states","title":"Electronic density of density of states","text":"<p>EDOS is a spectrum of the number of allowed electron energy levels (occupied and unoccupied)  against energy interval (generally in electron volt). EDOS is generally calculated based on a  dense k-point grid with a smoothening/smearing setup. EDOS is generally rescaled with respect to  the Fermi-energy of the system. A high value for the DOS represents a high number for the electronic  states that can be occupied. Experimental methods such as scanning tunneling microscopy can be  used obtain EDOS. One of the obvious properties that can be calculated from EDOS is the bandgap.  EDOS can be based on total density of states or further resolved into atom-projected and element-projected  density of states. The projected EDOS provides information about the particular electronic orbitals  (say s,p,d,f) and specific atom (say Si) contributing towards a particular energy level.  We calculate EDOS for both semi-local, HSE06 and PBE0 methods. At least, DOS is provided at  local or semilocal materials for all the materials. </p> <pre><code>from jarvis.io.vasp.outputs import Vasprun\nvrun = Vasprun('vasprun.xml')\ntotal_dos = vrun.total_dos\nenergies = total_dos[0]\nspin_up = total_dos[1]\nspin_dn = total_dos[2]\nspdf_dos = vrun.get_spdf_dos()\natoms_dos = vrun.get_atom_resolved_dos()\n\n</code></pre>"},{"location":"jarvisdft/#electronic-bandstructure","title":"Electronic Bandstructure","text":"<p>Following the laws of quantum mechanics only certain energy levels are allowed  and others could be forbidden. These levels can be discrete or spilt, called bands.  Electronic bands depend on crystal momentum leading to bandstructure.  The allowed states which are filled (upto the Fermi level) are valence bands while the  unoccupied bands are conduction bands. The difference in energy between the conduction  and valence band gives rise to the bandgaps. The materials with no bandgap are termed metals,  with low bandgap semiconductors and with high bandgaps insulators. We calculate bandstructure  using local, semi-local as well as hybrid functionals.</p> <pre><code>from jarvis.io.vasp.outputs import Vasprun\nvrun = Vasprun('vasprun.xml')\nband_info = vrun.get_bandstructure(kpoints_file_path='KPOINTS')\n\n</code></pre>"},{"location":"jarvisdft/#spin-orbit-spillage-and-topological-properties","title":"Spin-orbit spillage and topological properties","text":"<p>Topological materials driven by spin-orbit coupling have different bandgaps  with/without spin orbit coupling effects. Spillage is calculated by comparing the wavefunctions of these two bandstructures. We calculate the spillage values for a  large set of low bandgap and high atomic mass materials, with a spillage value of 0.5  as a threshold to screen for potential topologically non-trivial materials.  The threshold denotes number of band-inverted electrons. This criterion can be  used for predicting non-trivial topological behavior of metals, semiconductors  and both perfect and defective structures.</p> <pre><code>from jarvis.analysis.topological.spillage import Spillage\nspl = Spillage(wf_noso=wf_noso, wf_so=wf_so)\ninfo = spl.overlap_so_spinpol()\nmax_spillage = round(info[\"spillage\"], 2)\n\n</code></pre>"},{"location":"jarvisdft/#frequency-dependent-dielectric-function-and-optoelectronic-properties","title":"Frequency dependent dielectric function and optoelectronic properties","text":"<p>We use linear optics theory at semilocal and meta-GGA levels to calculate  frequency dependent real and imaginary part of dielectric function.  The meta-GGA based data should predict better bandgaps hence dielectric  function. Note that ionic contributions are ignored in such calculations.  Several important properties such as absorption coefficient, electron  energy loss spectrum, reflectivity, solar cell efficiency etc.  can be calculated from the frequency dependent dielectric function.</p> <p>Using the absorption coefficient and bandgap (indirect and direct gaps),  we calculate theoretical solar cell efficiencies of a material.</p> <pre><code>from jarvis.io.vasp.outputs import Vasprun\nvrun = Vasprun('vasprun.xml')\nreals, imags = vrun.dielectric_loptics\nen, abz = lvrun.avg_absorption_coefficient\nabz = abz * 100\neff_slme = SolarEfficiency().slme(\nen, abz, indirgap, indirgap, plot_current_voltage=False\n)\n# print(\"SLME\", 100 * eff)\neff_sq = SolarEfficiency().calculate_SQ(indirgap)\neff_slme = round(100 * eff_slme, 2)\neff_sq = round(100 * eff_sq, 2)\n</code></pre>"},{"location":"jarvisdft/#static-dielectric-tensor","title":"Static dielectric tensor","text":"<p>Dielectric materials are important components in many electronic devices such as capacitors, field-effect  transistors computer memory (DRAM), sensors and communication circuits. Both high and  low-value DL materials have applications in different technologies. Static dielectric  constants with both ionic and electronic contributions are obtained using DFPT method.  The electronic part of the dielectric constant is generally in close agreement with that  obtained from the linear optics method mentioned above.</p> <pre><code>from jarvis.io.vasp.outputs import Vasprun\nvrun = Vasprun('vasprun.xml')\nepsilon = vrun.dfpt_data[\"epsilon\"][\"epsilon\"]\nepsilon_rpa = vrun.dfpt_data[\"epsilon\"][\"epsilon_rpa\"]\nepsilon_ion = vrun.dfpt_data[\"epsilon\"][\"epsilon_ion\"]\n\n</code></pre>"},{"location":"jarvisdft/#piezoelectric-tensor","title":"Piezoelectric tensor","text":"<p>The piezoelectric effect is a reversible process where materials exhibit electrical polarization resulting  from an applied mechanical stress, or conversely,  a strain due to an applied electric field. Common applications for piezoelectricity include medical  applications, energy harvesting devices, actuators, sensors, motors, atomic force microscopes, and high  voltage power generation. PZ responses can be measured under constant strain, giving the piezoelectric  stress tensor e_ij or constant stress, giving the piezoelectric strain tensor d_ij .  Piezoelectric tensor is a 6x3 matrix.</p> <pre><code>from jarvis.io.vasp.outputs import Outcar\nout = Outcar('OUTCAR')\npza = out.piezoelectric_tensor[1]\nmax_pza = np.max(np.abs(pza))\nborn_charges = vrun.dfpt_data[\"born_charges\"]\n</code></pre>"},{"location":"jarvisdft/#infrared-intensity","title":"Infrared intensity","text":"<p>The infrared intensity is important for thermal-imaging, infrared-astronomy,  food-quality control. Infrared frequencies are classified in three categories:  far (30-400 cm-1), mid (400-4000 cm-1) and near (4000-14000 cm-1) IR frequencies.  The IR intensity is calculated obtained from the gamma-point phonon data used in the DFPT calculations.</p> <pre><code>from jarvis.analysis.phonon.ir import ir_intensity\nfrom jarvis.io.vasp.outputs import Outcar, Vasprun\nout = Outcar('OUTCAR')\nvrun = Vasprun('vasprun.xml')\nphonon_eigenvalues = out.phonon_eigenvalues\ndata = vrun.dfpt_data\nphonon_eigenvectors = data[\"phonon_eigenvectors\"]\nmasses = data[\"masses\"]\nborn_charges = data[\"born_charges\"]\nx, y = ir_intensity(\n      phonon_eigenvectors=phonon_eigenvectors,\n      phonon_eigenvalues=phonon_eigenvalues,\n      masses=masses,\n      born_charges=born_charges,\n)\n</code></pre>"},{"location":"jarvisdft/#elastic-tensor","title":"Elastic tensor","text":"<p>We use finite difference method on conventional cells of systems for ET calculations. For bulk material, the compliance tensor can be obtained as the inverse.</p> <p>Now, several other elastic properties calculated from Cij and sij. Some of the important properties are given below:</p> <p>KV = ((C11+C22+C33) + 2(C12+C23+C31))/9</p> <p>GV = ((C11+C22+C33) \u2212 (C12+C23 + C31) +3 (C44+C55+C66))/15</p> <p>KR = ((s11+s22+s33) + 2(s12+s23+s31))-1</p> <p>GR = 15(4(s11+s22+s33) - 4(s12+s23+s31) + 3(s44+s55+s66))-1</p> <p>KVRH =(KV+KR)/2</p> <p>GVRH =(GV+GR)/2</p> <p>\u03bd = (3KVRH \u2212 2GVRH)/(6KVRH+2GVRH))</p> <p>Here KV and GV are Voigt bulk and shear modulus, and KR and GR Reuss-bulk and shear modulus respectively.  The homogenous Poisson ratio is calculated as \u03bd. The EC data can be also used to predict the  ductile and brittle nature of materials with Pugh (Gv/Kv) and Pettifor criteria (C12-C44) .  Materials with Pugh ratio value &gt;0.571 and Pettifor criteria &lt;0 should be brittle, while  materials with Pugh ratio value &lt;0.571 and Pettifor criteria &gt;0 should be ductile. For monolayer  material calculations, the elastic tensor obtained from DFT code such as VASP, assumes  periodic-boundary-condition (PBC). Therefore, cell vectors are used to calculate the area  which again is used in computing stress. When dealing with the monolayer, an arbitrary vacuum  padding is added in one of the direction (say z-direction). When computing EC we need to correct  the output by eliminating the arbitrariness of the vacuum padding. We do that as a post-processing  step by multiplying the Cij components (i,j\u22603) by the length of the vacuum padding. Therefore, the  units of EC turn into Nm-1 from Nm-2.</p> <pre><code>from jarvis.io.vasp.outputs import Outcar\nfrom jarvis.analysis.elastic.tensor import ElasticTensor\ncij = out.elastic_props)[\"cij\"]\nd = ElasticTensor(cij).to_dict()\n</code></pre> <p>From the associated finite-difference calculations, force constants (mainly at gamma point in our  case) can be calculated. Using this information, we can predict the phonon density of states and  bandstructure assuming the conventional cell used in the calculation is large enough (at  least 11 Angstrom). Note that for smaller lengths the phonon bandstructure and density of states can show unreasonable frequencies at off and away from gamma points.</p> <pre><code>from jarvis.tasks.phonopy.run import run_phonopy\nfrom jarvis.io.phonopy.outputs import bandstructure_plot\nimport yaml\nrun_phonopy('OUTCAR')\nmesh_yaml = \"mesh.yaml\"\nband_yaml = \"band.yaml\"\nwith open(mesh_yaml, \"r\") as f:\n    doc = yaml.load(f)\nnmodes = doc[\"phonon\"][0][\"band\"]\nph_modes = []\n\nfor p in nmodes:\n    ph_modes.append(p[\"frequency\"])\nph_modes = sorted(set(ph_modes))\nf = open(totdos, \"r\")\nfreq = []\npdos = []\nfor lines in f.readlines():\n    if not str(lines.split()[0]).startswith(\"#\"):\n        freq.append(float(lines.split()[0]))\n        pdos.append(float(lines.split()[1]))\nfrequencies, distances, labels, label_points = bandstructure_plot(band_yaml)\n\n\n</code></pre>"},{"location":"jarvisdft/#thermoelectric-properties","title":"Thermoelectric properties","text":"<p>Thermoelectrics are materials that can convert a temperature gradient into  electric voltage, or vice-versa. Themoelectrics can be used to regenerate  electricity from waste heat, refrigeration and several other space-technology  applications. The search for efficient thermoelectric materials is an area of  intense research due the potential of converting waste heat into  electrical power, and therefore improving energy efficiency and reducing  fossil fuel usage.</p> <pre><code>from jarvis.io.boltztrap.outputs import BoltzTrapOutput  \nfrom jarvis.tasks.boltztrap.run import run_boltztrap\npath = 'xyz'\nrun_boltztrap(path)\nall_data = BoltzTrapOutput(path).to_dict()\n</code></pre>"},{"location":"jarvisdft/#wannier-tight-binding-hamiltonians","title":"Wannier tight binding Hamiltonians","text":"<p>Wannier functions (WF) were first introduced in 1937, and have proven to be a  powerful tool in the investigation of solid-state phenomenon such as polarization,  topology, and magnetization. WTBH is not necessarily a material properties but  can be useful in calculating several material properties. Mathematically,  WFs are a complete orthonormalized basis set that act as a bridge between a  delocalized plane wave representation commonly used in electronic structure  calculations and a localized atomic orbital basis that more naturally describes  chemical bonds. One of the most common ways of obtaining Wannier tight-bonding  Hamiltonians (WTBH) is by using the Wannier90 software package to generate maximally  localized Wannier functions, based on underlying density functional theory  (DFT) calculations.</p> <pre><code>from jarvis.io.wannier.outputs import WannierHam\nwann_ham = WannierHam(filename='wannier90_hr.dat')\nvrun = \"vasprun.xml\"\nbz = wann_ham.compare_dft_wann(vasprun_path=vrun, plot=False)\n</code></pre>"},{"location":"jarvisdft/#scanning-tunneling-microscopy-images","title":"Scanning tunneling microscopy images","text":"<p>Since the invention of the scanning tunneling microscope (STM), this technique  has become an essential tool for characterizing material surfaces and adsorbates.  In addition to providing atomic insights, STM has been proven useful for characterizing  the electronic structure, shapes of molecular orbitals, and vibrational and magnetic excitations. It can also be used for manipulating adsorbates and adatoms, and for catalysis  and quantum information processing applications. We use Tershoff-Hamman approach to predict  STM images of 2D materials.</p> <pre><code>from jarvis.analysis.stm.tersoff_hamann import TersoffHamannSTM\nTH_STM = TersoffHamannSTM(chg_name='PARCHG')\nt1 = TH_STM.constant_height(filename='STM.png')\n</code></pre>"},{"location":"jarvisdft/#electric-field-gradients","title":"Electric field gradients","text":"<p>EFG is a key parameter used to define Nuclear Quadrupole Resonance (NQR)  spectral lines EFG is defined as the second derivative in Cartesian  coordinates of the Coulomb potential at the nucleus position. By construction,  the EFG, Vii is a traceless tensor. The coordinate system, in accordance with the  convention used by experimentalists is chosen so that |V_zz |\u2265|V_yy |\u2265|V_xx |,   which forces 0\u2264\u03b7&lt;1. Note that if the point group of the site in question   is cubic, then by symmetry all components are zero.</p> <pre><code>from jarvis.io.vasp.outputs import Outcar\nefg = out.efg_raw_tensor\nmax_efg = np.max(np.abs(np.array(efg)))\n\n</code></pre>"},{"location":"jarvisdft/#dft-convergence-parameters","title":"DFT convergence parameters","text":"<p>Although density functional theory is exact in theory, its implementation  requires several approximations such as the choice of basis-set,  exchange-correlation functional, mesh-size for Brillouin zone (BZ)  integration and plane-wave cut-off for plane-wave basis. These parameters  need to be converged prior to geometric optimization and property predictions.  Such convergences are performed for k-point and plane wave cut-off only in  JARVIS-DFT leading to high quality of the data.</p>"},{"location":"jarvisdft/#data-quality-assessment","title":"Data quality assessment","text":"Method #Materials MAE (a) MAE (b) MAE (c) RMSE (a) RMSE (b) RMSE (c) OPT (All) 10052 0.11 0.11 0.18 0.29 0.30 0.58 PBE (All) 10052 0.13 0.14 0.23 0.30 0.29 0.61 OPT (vdW) 2241 0.20 0.21 0.44 0.44 0.44 0.99 PBE (vdW) 2241 0.26 0.29 0.62 0.45 0.51 1.09 OPT (non-vdW) 7811 0.08 0.08 0.11 0.23 0.24 0.39 PBE (non-vdW) 7811 0.09 0.09 0.12 0.22 0.25 0.36 <p>Table: Comparison of bandgaps obtained from OPT functional and MBJ potential schemes compared with experimental results and DFT data available in different databases. Materials, space-group (SG), Inorganic Crystal Structure Database (ICSD#) id, Materials-Project (MP#) id, JARVIS-DFT id (JV#), bandgap from MP (MP), bandgap from AFLOW, bandgap from OQMD, our OptB88vdW bandgap (OPT), Tran-Blah modified Becke-Johnson potential bandgap (MBJ), Heyd-Scuseria-Ernzerhof (HSE06) and experimental bandgaps (eV) data are shown. Experimental data were obtained from 18,21,46,47__. MAE denotes the mean absolute error, while SC is the Spearman's coefficient.</p> Mats. SG ICSD# MP# JV# MP AFLOW OQMD OPT MBJ HSE06 Exp. C Fd-3m 28857 66 91 4.11 4.12 4.4 4.46 5.04 5.26 5.5 Si Fd-3m 29287 149 1002 0.61 0.61 0.8 0.73 1.28 1.22 1.17 Ge Fd-3m 41980 32 890 0.0 0 0.4 0.01 0.61 0.82 0.74 BN P63/mmc 167799 984 17 4.48 4.51 4.4 4.46 6.11 5.5 6.2 AlN P63mc 31169 661 39 4.06 4.06 4.5 4.47 5.20 5.49 6.19 AlN F-43m 67780 1700 7844 3.31 3.31 - 3.55 4.80 4.55 4.9 GaN P63mc 34476 804 30 1.74 1.91 2.1 1.94 3.08 3.15 3.5 GaN F-43m 157511 830 8169 1.57 1.75 - 1.79 2.9 2.85 3.28 InN P63mc 162684 22205 1180 0.0 0.0 - 0.23 0.76 - 0.72 BP F-43m 29050 1479 1312 1.24 1.25 1.4 1.51 1.91 1.98 2.1 GaP F-43m 41676 2490 1393 1.59 1.64 1.7 1.48 2.37 2.28 2.35 AlP F-43m 24490 1550 1327 1.63 1.63 1.7 1.79 2.56 2.30 2.50 InP F-43m 41443 20351 1183 0.47 0.58 0.7 0.89 1.39 1.43 1.42 AlSb F-43m 24804 2624 1408 1.23 1.23 1.4 1.32 1.77 1.80 1.69 InSb F-43m 24519 20012 1189 0.0 0.0 0.0 0.02 0.80 0.45 0.24 GaAs F-43m 41674 2534 1174 0.19 0.30 0.8 0.75 1.32 1.40 1.52 InAs F-43m 24518 20305 97 0.0 0.0 0.3 0.15 0.40 0.45 0.42 BAs F-43m 43871 10044 7630 1.2 1.2 1.4 1.42 1.93 1.86 1.46 MoS2 P63/mmc 24000 2815 54 1.23 1.25 1.3 0.92 1.33 1.49 1.29 MoSe2 P63/mmc 49800 1634 57 1.42 1.03 1.0 0.91 1.32 1.40 1.11 WS2 P63/mmc 56014 224 72 1.56 1.29 1.4 0.72 1.51 1.6 1.38 WSe2 P63/mmc 40752 1821 75 1.45 1.22 1.2 1.05 1.44 1.52 1.23 Al2O3 R-3c 600672 1143 32 5.85 5.85 6.3 6.43 7.57 8.34 8.8 CdTe F-43m 31844 406 23 0.59 0.71 1.1 0.83 1.64 1.79 1.61 SnTe Fm-3m 52489 1883 7860 0.04 0.25 0.3 0.04 0.16 0.17 0.36 SnSe Pnma 60933 691 299 0.52 - 0.6 0.71 1.25 0.89 0.90 MgO Fm-3m 9863 1265 116 4.45 4.47 5.3 5.13 6.80 7.13 7.83 CaO Fm-3m 26959 2605 1405 3.63 3.64 3.8 3.74 5.29 5.35 7.0 CdS P6_3mc 31074 672 95 1.2 1.25 1.4 1.06 2.61 - 2.5 CdS F-43m 29278 2469 8003 1.05 1.19 1.4 0.99 2.52 2.14 2.50 CdSe F-43m 41528 2691 1192 0.51 0.64 1.0 0.79 1.84 1.52 1.85 MgS F-43m 159401 1315 1300 2.76 3.39 3.6 2.95 4.26 4.66 4.78 MgSe Fm-3m 53946 10760 7678 1.77 1.77 1.8 2.12 3.37 2.74 2.47 Mats. SG ICSD# MP# JV# MP AFLOW OQMD OPT MBJ HSE Exp. MgTe F-43m 159402 13033 7762 2.32 2.32 2.5 2.49 3.49 3.39 3.60 BaS Fm-3m 30240 1500 1315 2.15 2.15 2.4 2.15 3.23 3.11 3.88 BaSe Fm-3m 43655 1253 1294 1.95 1.95 2.9 1.97 2.85 2.79 3.58 BaTe Fm-3m 29152 1000 1267 1.59 1.59 1.7 1.61 2.15 2.31 3.08 TiO2 P42/mnm 9161 2657 5 1.78 2.26 1.8 1.77 2.07 3.34 3.30 TiO2 I41/amd 9852 390 104 2.05 2.53 2.0 2.02 2.47 - 3.4 Cu2O Pn-3m 26183 361 1216 0.5 - 0.8 0.13 0.49 1.98 2.17 CuAlO2 R-3m 25593 3748 1453 1.8 2.0 2.4 2.06 2.06 - 3.0 ZrO2 P21/c 15983 2858 113 3.47 3.56 4.0 3.62 4.21 - 5.5 HfO2 P21/c 27313 352 9147 4.02 4.02 4.5 4.12 5.66 - 5.7 CuCl F-43m 23988 22914 1201 0.56 1.28 0.8 0.45 1.59 2.37 3.4 SrTiO3 Pm-3m 23076 5229 8082 2.1 2.29 1.8 1.81 2.30 - 3.3 ZnS F-43m 41985 10695 1702 2.02 2.67 2.4 2.09 3.59 3.30 3.84 ZnSe F-43m 41527 1190 96 1.17 1.70 1.5 1.22 2.63 2.37 2.82 ZnTe F-43m 104196 2176 1198 1.08 1.48 1.5 1.07 2.23 2.25 2.39 SiC F-43m 28389 8062 8158 1.37 1.37 1.5 1.62 2.31 - 2.42 LiF Fm-3m 41409 1138 1130 8.72 8.75 11.0 9.48 11.2 - 14.2 KCl Fm-3m 18014 23193 1145 5.03 5.05 5.3 5.33 8.41 6.53 8.50 AgCl Fm-3m 56538 22922 1954 0.95 1.97 1.1 0.93 2.88 2.41 3.25 AgBr Fm-3m 52246 23231 8583 0.73 1.57 0.9 1.00 2.52 2.01 2.71 AgI Fm-3m 52361 22919 8566 0.77 1.98 1.4 0.39 2.08 2.48 2.91 MAE1 - - - - 1.45 1.23 1.14 1.33 0.51 0.41 - MAE2 - - - - 1.39 1.19 1.09 1.27 0.43 0.42 - S.C. - - - - 0.81 0.94 0.88 0.84 0.94 0.97 - <p>Table Bandgap and SLME properties of a selection of materials with TBmBJ and G __0__ W __0 methods in DFT to evaluate uncertainty in predictions. Here E__ g denotes the bandgap in eV and \u0273 the calculated SLME in percentage.</p> Materials JID Eg(TBmBJ)   Eg(G0W0) Eg(G0W0+SOC)  \u0220(TBmBJ) \u0220(G0W0)   \u0220(G0W0+SOC) CuBr 5176 1.9 2.01 2.09 25.6 22.74 21.04 AuI 3849 2.1 2.34 2.20 11.4 8.83 11.86 SiAs 4216 1.6 1.36 1.33 26.1 23.85 23.20 BiTeBr 8781 1.90 1.52 0.79 25.2 32.15 26.11 TlPt 2 S 3 4630 1.30 1.45 1.35 32.70 30.99 - MAD - - 0.22 0.34 - 3.23 2.21 <p>Table. Comparison of static dielectric constant for DFPT, MBJ and experiment. Experimental data were obtained from. MBJ data were obtained from our optoelectronic property database.</p> Materials JID DFPT MBJ Experiment MoS2 54 _\u03b5_11 =15.56 _\u03b5_11=15.34 _\u03b5_11=17.0 MoSe2 57 _\u03b5_11=16.90 _\u03b5_11=16.53 _\u03b5_11=18.0 MoTe2 60 _\u03b5_11=21.72 _\u03b5_11=18.74 _\u03b5_11=20.0 WS2 72 _\u03b5_11=13.91 _\u03b5_11=13.95 _\u03b5_11=11.5 WSe2 75 _\u03b5_11=15.21 _\u03b5_11=14.32 _\u03b5_11=11.7 SiC 182 7.10 6.01 6.552 AlP 1327 10.33 6.94 7.54 BN 17 _\u03b5_11=4.75 _\u03b5_11=3.72 _\u03b5_11=5.06 BP 1312 9.03 7.94 11.0 GaP 1393 13.22 8.33 11.11 AlSb 1408 12.27 9.87 12.04 ZnS 1702 9.39 4.8 8.0 CdTe 23 19.59 6.54 10.6 HgTe 8041 _\u03b5_11=29.44 _\u03b5_11=11.22 _\u03b5_11=20 ZnSiP2 2376 _\u03b5_11=12.44 _\u03b5_11=8.56 _\u03b5_11=11.15 ZnGeP2 2355 _\u03b5_11=14.75 _\u03b5_11=9.02 _\u03b5_11=15 MAE - 2.46 2.78 - <p>Table Comparison of piezoelectric coefficient max(eij) data for experiments and DFT. We take average values for the cases where the experimental data are in a range.</p> Mats. JID Max(eij) DFT Reference BN 57695 1.55 1.15 9 AlN 39 1.39-1.55 1.39 10-12 ZnS 7648 0.38 0.13 9 ZnSe 8047 0.35 0.06 9 SiO2 41 0.171 0.16 13,14 BaTiO3 110 1.94-5.48 4.13 15,1617,18 LiNbO3 1240 1.33 1.59 19 GaSb 35711 -0.07 -0.102 9 PbTiO3 3450 3.35-5.0 3.96 20 GaN 30 0.73 0.47 21 InN 1180 0.97 0.90 22 AlP 1327 -0.1 0.004 9 AlAs 1372 -0.16 0 9 AlSb 1408 -0.13 0.06 9 ZnO 1195 1.00-1.55,0.89 1.10 23 BeO 20778 0.1 0.22 23 MAD 0.21 <p>Table Comparison of experimental and DFPT IR frequencies (cm __-1__ ).</p> Mats. JID DFPT Experiment ZnO 1195 379, 410 389,4131 AlN 39 600, 653 620,6692 GaN 30 532 5313,4 SnS 1109 93, 144, 178, 214 99, 145, 178, 220 5 SnSe 299 72.6, 98.44, 125.01, 160.3 80,96,123, 150 5 KMgF3 20882 160.0, 287.0, 470.8 168, 299, 4586 LiNbO3 1240 145.0, 216.6 160, 2207 GeS 2169 106.4, 196.2, 236.5, 253.0, 276.9 118, 201,238,258, 2808 MAD 8.36 <p>Table. Comparison of bulk modulus, K__V (GPa), from vdW-DF-optB88 (OPT) and experiments. The experimental data are however not data corrected for zero-point energy effects, which would lead to a slight increase__of the values.</p> Material JVASP# OPT Expt. Cu 14648 141.4 142 V 1041 183.4 161.9 C (diamond) 91 437.4 443 Fe 882 193 168.3 Si 1002 87.3 99.2 Ni 14630 200.4 186 Ge 890 58.1 75.8 Nb 934 176 170.2 Ag 813 100.3 109 Mo 925 262 272.5 Pd 14644 176 195 Ta 14750 199 200 Rh 14817 260.8 269 W 14830 305.2 323.2 Li 913 13.9 13.3 Ir 901 348 355 Na 25140 7.7 7.5 Pt 972 251.6 278.3 K 14800 3.9 3.7 Au 825 148 173.2 Rb 978 3.1 2.9 Pb 961 42.6 46.8 Ca 846 17.7 18.4 LiCl 23864 35.5 35.4 Sr 21208 12.5 12.4 NaCl 23862 27.7 26.6 Ba 831 9.9 9.3 NaF 20326 53.7 51.4 Al 816 70 79.4 MgO 116 160.7 165 LiF 1130 73.9 69.8 SiC 182 213.3 225 TiO2-anatase 314 196 191.9 GaAs 1174 62 75.6 TiO2-rutile 10036 226.3 243.5 P (black) 7818 41 36 MAE (GPa): 8.51 <p>Table : Chemical formula, experimental Seebeck value (_\u03bcV/K), DFT value, JARVIS-ID, doping concentration, doping type, temperature, space-group and reference data for the experimental vs DFT comparisons._</p> Formula Exp DFT JID Dop.conc. (/cm3)   type   T(K) Spg. Bi2Te3 116 124.7357 JVASP-25 7.78E+19 p 420 166 Bi2Se3 -70 -136.9 JVASP-1067 -2.20E+19 n 420 166 CuInTe2 254 203.5364 JVASP-3495 1.60E+19 P 300 122 CuGaTe2 380 448.9839 JVASP-2295 1.00E+18 p 300 122 AgTlTe 550 721 JVASP-9744 1.00E+17 p 320 62 ErNiSb 258 268.71 JVASP-1903 1.42E+19 p 335 216 Cu2ZnSnSe4 -26.02 -23.98 JVASP-17430 1.00E+18 p 293 121 CoNbSn -69 -2.22 JVASP-18668 5.97E+16 p 318 216 AlFe2V -107 -32.3911 JVASP-15637 5.00E+20 n 300 225 CoSbZr -62 -43.9953 JVASP-18207 2.72E+20 n 335 216 SnSe 586 674.7 JVASP-299 3.16E+17 p 523 62 SnTe 103 111.855 JVASP-7860 1.00E+21 p 817 225 Cu2Se 258 148.2624 JVASP-18192 2.00E+21 p 900 216 Mg2Sn -71.5 -91.3387 JVASP-14507 -2.00E+19 n 400 225 <p>Table Comparison of current density functional (J-DFT) predictions with experimental (Exp) and previously (Prev.-DFT) reported Electric Field Gradient, V__zz (10__21 __Vm__ -2__) data. The MAD (Mean Absolute Deviation), and MAPD (Mean Absolute Percentage Difference) values are calculated for the whole data. Details of each material are provided at its corresponding webpage. Please look into the references (and references therein) for experimental and previously calculated data.</p> Material JID Atom V zz (Exp)  V zz (J-DFT)  V zz (Prev.-DFT)  \u0394 \u0394% Cl2 855 Cl 55.1858 52.85 54.2343 2.33 4.22 Br2 840 Br 95.6958 88.86 94.4443 6.83 7.14 I2 895 I 113.0058 108.70 119.0143 4.30 3.81 Be 25056 Be 0.04459 0.072 0.0660 0.028 63.64 Mg 14840 Mg 0.04859 0.079 0.0460 0.031 64.58 Sc 996 Sc 0.3859 1.78 0.9660 1.40 368.4 Ti 14815 Ti 1.6159,61 1.64 1.7560 0.03 1.86 Co 858 Co 2.959 0.52 0.2960 2.38 82.06 Zn 1056 Zn 3.4859 5.62 4.2960 2.14 61.50 Zr 14612 Zr 4.4059 3.50 4.1460 0.90 20.45 Tc 1020 Tc 1.8359 1.67 1.7460 0.16 8.74 Ru 987 Ru 0.9759 1.52 1.6260 0.55 56.70 Cd 14832 Cd 6.5059 7.56 8.1360 1.06 16.31 La 910 La 1.6259 2.24 0.9160 0.62 38.27 Hf 14590 Hf 7.3359 8.87 8.1260 1.54 21.01 Re 981 Re 5.1259 6.14 6.4960 1.02 19.92 Os 952 Os 4.1659 6.00 7.0260 1.84 44.23 BI3 3630 I 71.2962 68.98 - 2.31 3.24 CF3I 32512 I 124.3463 123.22 - 1.12 0.90 CIN 5758 I 157.2164 151.0 - 6.21 3.95 NaNO2 1429 Na 0.43865 0.552 0.57566 0.114 26.03 NaNO2 1429 N 11.1065 12.194 11.77266 1.094 9.86 Cu2O 1216 Cu 9.8067 6.47 6.76566 3.33 33.98 TiO2 10036 Ti 2.2168 2.098 2.26966 0.112 5.07 TiO2 10036 O 2.3868 2.21 2.23566 0.17 7.14 SrTiO3 8082 O 1.6269 1.24 1.0070 0.38 23.46 BaTiO3 8029 O 2.4669 3.56 2.3570 1.10 44.72 Li3N 1375 N 1.0471 1.25 1.0966 0.21 20.19 Li3N 1375 Li(2c) 0.3071 0.225 0.29166 0.075 25.00 Li3N 1375 Li(1b) 0.6071 0.50 0.61666 0.144 24.00 FeSi 8178 Fe 4.4572,73 4.84 4.9243 0.39 8.76 FeS2(marcasite) 2142 Fe 3.074 2.93 3.2143 0.07 2.33 FeS2(pyrite) 9117 Fe 3.6674 3.51 3.4043 0.15 4.10 2H-MoS2 54 Mo 7.0939,40 7.70 - 0.61 8.60 2H-MoS2 54 S 5.5439,40 5.33 - 0.21 3.80 2H-WS2 72 S 4.8239,40 4.53 - 0.29 6.22 CaGa2 16464 Ga 4.4475 3.55 3.7776 0.89 20.05 SrGa2 14853 Ga 5.2275 2.54 4.1376 2.68 51.34 BaGa2 19628 Ga 4.4875 5.10 4.3876 0.62 13.84 NaGa4 14728 Ga(e) 6.4976 5.20 6.1876 1.29 19.88 NaGa4 14728 Ga(d) 4.6476 4.33 4.4476 0.31 6.68 CaGa4 20533 Ga(e) 2.8976 2.67 2.8076 0.22 7.61 CaGa4 20533 Ga(d) 4.8776 4.99 4.7376 0.12 2.46 SrGa4 20206 Ga(e) 2.5176 1.67 2.2476 0.84 33.47 SrGa4 20206 Ga(d) 5.9576 5.31 5.6476 0.64 10.76 TaP 79643 Ta 3.0077 2.5 3.5477 0.50 16.67 UAs2 19797 U 15.078 9.7 13.0357 5.3 35.3 <p>Table. Mean Absolute Error (MAE) for JARVIS-DFT data with respect to available experimental data for various material properties.</p> Property #Materials MAE Typical range Formation energy (eV/atom) 1317 0.128 -4 to 2 OptB88vdW-bandgaps (eV) 54 1.33 0 to 10 TBmBJ-bandgaps (eV) 54 0.51 0 to 10 Bulk modulus (GPa) 21 5.75 0 to 250 Electronic (\ud835\udf0011) OPT 28 3.2 0 to 60 Electronic (\ud835\udf0011) MBJ 28 2.62 0 to 60 Solar-eff. (SLME) (%) (MBJ) 5 6.55 0 to 33.7 Max. piezoelectric strain coeff (Cm-2) 16 0.21 0 to 2 Dielectric constant (\ud835\udf0011) (DFPT) 16 2.46 0 to 60 Seebeck coefficient (\u03bcV/K) 14 54.7 -600 to 600 Electric field gradient Vzz (1021Vm-2) 37 1.17 0 to 100 IR mode (cm-1) 8 8.36 0 to 4000"},{"location":"jarvisdft/#references","title":"References","text":"<ol> <li>JARVIS: An Integrated Infrastructure for Data-driven Materials Design, arXiv:2007.01831 (2020).</li> <li>High-throughput Identification and Characterization of Two-dimensional Materials using Density functional theory, Scientific Reports 7, 5179 (2017).</li> <li>Computational Screening of High-performance Optoelectronic Materials using OptB88vdW and TBmBJ Formalisms, Scientific Data 5, 180082 (2018).</li> <li>Elastic properties of bulk and low-dimensional materials using Van der Waals density functional, Phys. Rev. B, 98, 014107 (2018).</li> <li>High-throughput Discovery of Topologically Non-trivial Materials using Spin-orbit Spillage, Scientific Reports 9, 8534 (2019).</li> <li>Convergence and machine learning predictions of Monkhorst-Pack k-points and plane-wave cut-off in high-throughput DFT calculations, Comp. Mat. Sci. 161, 300 (2019).</li> <li>High-throughput Density Functional Perturbation Theory and Machine Learning Predictions of Infrared, Piezoelectric and Dielectric Responses,npj Computational Materials, 6, 64 (2020).</li> <li>Computational Search for Magnetic and Non-magnetic 2D Topological Materials using Unified Spin-orbit Spillage Screening, npj Computational Materials, 6, 49 (2020).</li> <li>Accelerated Discovery of Efficient Solar-cell Materials using Quantum and Machine-learning Methods, Chem. Mater., 31, 15, 5900 (2019).</li> <li>Data-driven Discovery of 3D and 2D Thermoelectric Materials, J. Phys.: Condens. Matter 32, 475501 (2020).</li> <li>Efficient Computational Design of 2D van der Waals Heterostructures: Band-Alignment, Lattice-Mismatch, Web-app Generation and Machine-learning, submitted.</li> <li>Density Functional Theory based Electric Field Gradient Database, arXiv:2005.09255.</li> <li>Database of Wannier Tight-binding Hamiltonians using High-throughput Density Functional Theory, arXiv:2007.01205.</li> <li>Density Functional Theory and Deep-learning to Accelerate Data Analytics in Scanning Tunneling Microscopy, arXiv:1912.09027.</li> </ol>"},{"location":"jarvisff/","title":"FF","text":""},{"location":"jarvisff/#overview","title":"Overview","text":"<p>JARVIS-FF is a repository of classical force-field/potential calculation data  intended to help users select the most appropriate force-field for a specific application.  Many classical force-fields are developed for a particular set of properties (such as energies),  and may not have been tested for properties not included in training (such as elastic constants,  or defect formation energies). JARVIS-FF provides an automatic framework to consistently calculate and compare basic properties,  such as the bulk modulus, defect formation energies, phonons, etc. that may be critical for specific molecular-dynamics simulations.  JARVIS-FF relies on DFT and experimental data to evaluate accuracy.</p> <p></p> <p>Table. A summary of various types of force-fields available in the JARVIS-FF.</p> Force-fields Numbers EAM 92 Tersoff 9 ReaxFF 5 COMB 6 AIREBO 2 MEAM 1 EIM 1"},{"location":"jarvisff/#methodology","title":"Methodology","text":"<ul> <li>We started by downloading all the available potentials from the NIST interatomic potential repository  (IPR) and from LAMMPS software directory. </li> <li>For each element having at least a potential, we downloaded all the corresponding crystal structures from  the Materials Project or JARVIS-DFT database. </li> <li>We also downloaded all the energetics and mechanical properties data from and stored them in a separate database for a  later comparison with the classical results (LAMMPS calculations at T=0 K). </li> <li>The high-throughput setting of LAMMPS jobs was done using JARVIS-tools. </li> <li>In our runs we used 10-06 as strain, 10-10 eV/\u00c5 for force convergence during the minimization to optimize the structure and 1000 maximum iteration for structure optimization. These are generalized computational set-up parameters, and the energetics and elastic constant data may or may not depend on them. </li> <li>We tested strain parameters for a range of values (10-04, 10-06 and 10-08) but obviously evaluating such set of parameters  for all the calculations was too extensive a work and was not carried out here. </li> <li>The relaxed structure was also stored along with the above files for later use such as for performing defect,  phonon or other similar calculations. After the minimization, the crystal structure is stored in LAMMPS data-format and JSON format. </li> <li>Using this JSON file, unique Wyckoff positions were identified and deleted to represent vacancy-structures.  The multiplicity of the Wyckoff positions is also recorded. </li> <li>After the defect structure generation, the LAMMPS energy minimization is carried out.  In a subsequent run, we calculate the chemical potential of the defect element using the specific force-field.</li> <li>The data for the vacancy structure, chemical potential of element and perfect structure energy were used  to calculate the defect formation energies. The most stable prototype for chemical potential calculation  was determined using the energy above convex hull data from DFT. The defect structures were required to  be at least 1.5 nm long in the x, y and z directions to avoid self-interactions with the periodic images  of the simulation cell. Similar to the defect structures, distinct surfaces were created up to  3 Miller indices with the relaxed structure stored in the JSON file. </li> <li>A generic code for generating  defect and surface structures is given at our github page. We enforce the surfaces to be at least  2.5 nm thick and with 2.5 nm vacuum in the simulation box.  The 2.5 nm vacuum is used to ensure no  self-interaction and the thickness is used to mimic actual experimental surface. Using the energies of  perfect bulk and surface structures, surface energies for a specific plane are calculated. </li> <li>We should point  out that only unreconstructed surfaces without any surface-segregation effects are computed,  as our high-throughput approach does not allow for taking into account specific, element dependent reconstructions yet.</li> <li>Phonons were obtained by making an interface of JARVIS-FF with Phonopy package at 0 K. For deformed-structures, constant volume ensemble was used. The deformed structures were taken of at least 1.5 nm size in all directions.</li> </ul> <pre><code>from jarvis.tasks.lammps.lammps import LammpsJob, JobFactory\nfrom jarvis.core.atoms import Atoms\natoms = Atoms.from_cif('abc.cif')\nparameters = {\n        \"pair_style\": \"eam/alloy\",\n        \"pair_coeff\": \"/data/knc6/JARVIS-FF-NEW/FS/Al1.eam.fs\",\n        \"atom_style\": \"charge\",\n        \"control_file\": \"inelast.mod\",\n    }\nlmp = LammpsJob(atoms=atoms, parameters=parameters, lammps_cmd=cmd).runjob()\njob_fact = JobFactory(pair_style='eam/alloy',name=\"my_first_lammps_run\")\ncmd = 'lmp_serial&lt;in.main&gt;lmp.out'\njob_fact.all_props_eam_alloy(atoms=atoms,ff_path='Al1.eam.fs',lammps_cmd=cmd)\n</code></pre>"},{"location":"jarvisff/#property-details-and-assesment","title":"Property details and assesment","text":"<ul> <li>Using jarvis.core.Atoms class several atomistic properties such as lattice parameters, density,  packing fraction etc. can be calculated. </li> <li>The optimized lattice parameters generally  compare well with DFT data except for the FFs where a particular phase was not trained  during FF-fitting. </li> <li>Similarly, energetics in terms of convex hull plot is compared between DFT and FF results.</li> <li>Elastic tensor and derived properties were predicted using LAMMPS runs and comapred with DFT data.</li> <li>For the defect formation energies, we consider vacancies and free-surfaces which are generated by the modules in the JARVIS-Tools. </li> <li>Phonon data from JARVIS-DFT and JARVIS-FF can be compared for a system to evaluate the phonon quality.  However, it is important to note that in DFT there might be only conventional cell Gamma-point phonon  data available whereas in JARVIS-FF we use supercell finite difference-based approach for obtaining phonon  density of states and bandstructures. </li> <li>For a known stable material if the phonon bandstructure shows high  negative values then it signifies the FF maynot be suitable to predict correct dynamical properties of the system.</li> </ul>"},{"location":"jarvisff/#references","title":"References","text":"<ol> <li>Evaluation and comparison of classical interatomic potentials through a user-friendly interactive web-interface, Scientific Data 4, 160125 (2017).</li> <li>High-throughput assessment of vacancy formation and surface energies of materials using classical force-fields, J. Phys. Cond. Matt. 30, 395901(2018).</li> </ol>"},{"location":"jarvisml/","title":"ML","text":""},{"location":"jarvisml/#overview","title":"Overview","text":"<p>Currently, there are two types of data that are machine-learned (ML) in JARVIS-ML: discrete and image-based.</p> <p>JARVIS-ML introduced Classical Force-field Inspired Descriptors (CFID) as a universal framework  to represent a material\u2019s chemistry-structure-charge related data. These descriptors along with  powerful AI/ML algortihms such as neural networks, Gaussain processes and decision trees etc. provide a powerful tool for materials informatics. With the help of CFID and  JARVIS-DFT data, several high-accuracy classifications and regression ML models were developed,  with applications to fast materials-screening and energy-landscape mapping. Some of the trained  property models include formation energies, exfoliation energies, bandgaps, magnetic moments,  refractive index, dielectric, thermoelectric, and maximum piezoelectric and infrared modes.  Also, several ML interpretability analysis revealed physical-insights beyond intuitive  understandings in materials-science. These models, the workflow, dataset etc. are disseminated  to enhance the transparency of the work. Recently, JARVIS-ML expanded to include STM-image ML models,  as they are reported to directly accelerate experiments. Graph convolution neural network models are  being developed for the image and crystal-structures. For image based convolution neural network based classification is carried out.</p> <p>.</p>"},{"location":"jarvisml/#methodology","title":"Methodology","text":"<ul> <li>Crystal structure specific information are converted into the Classical Force-field Inspred Descriptors (CFID). </li> <li>For each crystal (3D, 2D, 1D, 0D, molecule, proteins and surface) 1557 CFID descriptors are obtaines.</li> <li>The CFID consists of 1557 descriptors for each material: 438 average chemical, 4 simulation-box-size,  378 radial charge-distribution, 100 radial distribution, 179 angle-distribution up to first neighbor, and  another 179 for the second neighbor, 179 dihedral angle up to fist neighbor and 100 nearest neighbor descriptors. </li> <li>We have converted at least 1 million atomic structures to CFID descriptors and that  dataset will be made available soon. After generating the features, we trained several property models. </li> <li>JARVIS-ML model accuracy is evaluated on the test-set (usually 10 %) representing newly computed and  previously unseen DFT data for both regression and classifications models. Accuracy of regression and  classification models are reported in terms of mean absolute error (MAE) and Receiver Operating  Characteristic (ROC) Area Under Curve (AUC) metric respectively. </li> </ul> <pre><code># An example of JARVIS-ML training\nfrom jarvis.ai.pkgs.utils import get_ml_data\nfrom jarvis.ai.pkgs.utils import regr_scores\nX,y,jid=get_ml_data()\n#Formation energy for 3D materials, you can choose other properties/dataset as well\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nlgbm = lgb.LGBMRegressor(device= 'gpu',n_estimators= 1170,learning_rate= 0.15375236057119931,num_leaves= 273)       \nX_train, X_test, y_train, y_test, jid_train, jid_test = train_test_split(X, y, jid, random_state=1, test_size=.1)\nlgbm.fit(X_train,y_train)\npred = lgbm.predict(X_test)\nreg_sc = regr_scores(y_test, pred)\nprint (reg_sc['mae'])\n\n</code></pre>"},{"location":"jarvisml/#property-details-and-assesment","title":"Property details and assesment","text":"<p>Table. Performance of regression machine learning models in JARVIS-ML with JARVIS-DFT data using  OptB88vdW (OPT) and TBmBJ (MBJ) with mean absolute error (MAE). The mean absolute deviation (MAD)  of properties are also included.</p> Property Training data MAE MAD Formation energy (eV/atom) 24549 0.12 0.81 OPT bandgap (eV) 22404 0.32 1.05 MBJ bandgap (eV) 10499 0.44 1.60 Bulk mod., Kv (GPa) 10954 10.5 49.95 Shear mod., Gv (GPa) 10954 9.5 23.26 Refr. Index(x) (OPT) 12299 0.54 1.15 Refr. Index(x) (MBJ) 6628 0.45 1.03 IR mode (OPT) (cm-1) 3411 77.84 316.7 Max. Born eff. charge (OPT)(e) 3411 0.60 1.48 Plane-wave cutoff (OPT)(eV) 24549 85.0 370.6 K-point length (OPT)(\u00c5) 24549 9.09 22.23 2D-Exfoliation energy(OPT) (eV/atom) 616 37.3 46.09 <p>Table. Performance of the classification machine learning models in JARVIS-ML with JARVIS-DFT data using OptB88vdW (OPT) and TBmBJ (MBJ) with Receiver Operating Characteristic (ROC) Area Under Curve (AUC) metric. Random guessing and perfect ROC AUC are 0.5 and 1 respectively.</p> Property Number of datapoints ROC AUC Metal/non-metal (OPT) 24549 0.95 Magnetic/Non-magnetic (OPT) 24549 0.96 High/low solar-cell efficiency (TBmBJ) 5097 0.90 High/low piezoelectric coeff 3411 0.86 High/low Dielectric 3411 0.93 High/low n-Seebeck coeff 21899 0.95 High/low n-power factor 21899 0.80 High/low p-Seebeck coeff 21899 0.96 High/low p-power factor 21899 0.82"},{"location":"jarvisml/#references","title":"References","text":"<ol> <li>Machine learning with force-field inspired descriptors for materials: fast screening and mapping energy landscape, Phys. Rev. Mat., 2, 083801 (2018).</li> <li>Materials Science in the AI age: high-throughput library generation, machine learning and a pathway from correlations to the underpinning physics, MRS Comm., 9, 821 (2019).</li> <li>Enhancing materials property prediction by leveraging computational and experimental data using deep transfer learning, Nat. Comm., 10, 5316 (2019).</li> <li>Convergence and machine learning predictions of Monkhorst-Pack k-points and plane-wave cut-off in high-throughput DFT calculations, Comp. Mat. Sci. 161, 300 (2019).</li> <li>Accelerated Discovery of Efficient Solar-cell Materials using Quantum and Machine-learning Methods, Chem. Mater., 31, 15, 5900 (2019).</li> <li>Data-driven Discovery of 3D and 2D Thermoelectric Materials, arXiv:1906.06024.</li> <li>High-throughput Density Functional Perturbation Theory and Machine Learning Predictions of Infrared, Piezoelectric and Dielectric Responses, npj Computational Materials, 6, 64 (2020).</li> <li>Density Functional Theory and Deep-learning to Accelerate Data Analytics in Scanning Tunneling Microscopy, arXiv:1912.09027.</li> </ol>"},{"location":"jarvistools/","title":"Tools","text":""},{"location":"jarvistools/#overview","title":"Overview","text":"<p>JARVIS-Tools is a python-based software package with \u2248 20,000 lines of code and consisting of several  python-classes and functions. JARVIS-Tools can be used for a) the automation of simulations and  data-generation, b) post-processing and analysis of generated data, and c) the dissemination of  data and methods. It uses cloud-based continuous integration checking including  GitHubAction, CircleCI, TravisCI, CodeCov, and PEP8 linter to maintain consistency in the code and  its functionalities. The JARVIS-Tools is distributed through an open GitHub repository: GitHub page .</p>"},{"location":"jarvistools/#installation","title":"Installation","text":"<p>Follow the instructions:</p> <p>Installation instructions</p>"},{"location":"jarvistools/#features","title":"Features","text":"<ul> <li>High-throughput density functional theory, classical force-field/moelcular dynamics, machine-learning calculations.</li> <li>Post-processing and plotting tools for calulation results.</li> <li>Uploading and downloading data to JARVIS-API and Figshare through REST framework.</li> <li>Development of webpages for materials data.</li> </ul>"},{"location":"jarvistools/#modules","title":"Modules","text":"<p>JARVIS-Tools module list and respective documentation is available at:</p> <p>ReadTheDocs</p>"},{"location":"publications/","title":"Publications","text":""},{"location":"publications/#jarvis-overview","title":"JARVIS-overview","text":"<p>1. The joint automated repository for various integrated simulations (JARVIS) for data-driven materials design, npj Computational Materials  6, 173 (2020).</p>"},{"location":"publications/#jarvis-ff-related","title":"JARVIS-FF related","text":"<p>2. Evaluation and comparison of classical interatomic potentials through a user-friendly interactive web-interface, Nature: Sci Data. 4, 160125 (2017).</p> <p>3. High-throughput assessment of vacancy formation and surface energies of materials using classical force-fields, J. Phys. Cond. Matt. 30, 395901(2018).</p>"},{"location":"publications/#jarvis-dft-related","title":"JARVIS-DFT related","text":"<p>4. High-throughput Identification and Characterization of Two-dimensional Materials using Density functional theory, Scientific Reports 7, 5179 (2017).</p> <p>5. Computational Screening of High-performance Optoelectronic Materials using OptB88vdW and TBmBJ Formalisms, Scientific Data 5, 180082 (2018). </p> <p>6. Elastic properties of bulk and low-dimensional materials using van der Waals density functional, Phys. Rev. B, 98, 014107 (2018).</p> <p>7. High-throughput Discovery of Topologically Non-trivial Materials using Spin-orbit Spillage, Nature: Sci. Rep. 9, 8534,(2019). </p> <p>8. Computational Search for Magnetic and Non-magnetic 2D Topological Materials using Unified Spin-orbit Spillage Screening, npj Comp. Mat., 6, 49 (2020).</p> <p>9. Density Functional Theory based Electric Field Gradient Database, Sci. Data 7, 362 (2020).</p> <p>10. Computational scanning tunneling microscope image database, Sci. Data, 8, 57 (2021).</p> <p>11. Database of Wannier Tight-binding Hamiltonians using High-throughput Density Functional Theory.</p> <p>12. Predicting Anomalous Quantum Confinement Effect in van der Waals Materials.</p> <p>13. High-throughput search for magnetic topological materials using spin-orbit spillage, machine-learning and experiments.</p>"},{"location":"publications/#jarvis-ml-related","title":"JARVIS-ML related","text":"<p>14. Machine learning with force-field inspired descriptors for materials: fast screening and mapping energy landscape, Phys. Rev. Mat., 2, 083801 (2018).</p> <p>15. Convergence and machine learning predictions of Monkhorst-Pack k-points and plane-wave cut-off in high-throughput DFT calculations, Comp. Mat. Sci. 161, 300 (2019).</p> <p>16. Materials science in the artificial intelligence age: high-throughput library generation, machine learning, and a pathway from correlations to the underpinning physics, MRS Comm., 1-18, 2019.</p> <p>17. Enhancing materials property prediction by leveraging computational and experimental data using deep transfer learning, Nature Comm., 10, 1, (2019).</p> <p>18. Accelerated Discovery of Efficient Solar-cell Materials using Quantum and Machine-learning Methods, Chem. Mater., 31, 5900 (2019).</p> <p>19. High-throughput Density Functional Perturbation Theory and Machine Learning Predictions of Infrared, Piezoelectric and Dielectric Responses, npj Computational Materials 6, 64 (2020).</p> <p>20. Data-driven Discovery of 3D and 2D Thermoelectric Materials</p> <p>21. Efficient Computational Design of 2D van der Waals Heterostructures: Band-Alignment, Lattice-Mismatch, Web-app Generation and Machine-learning.</p> <p>22. Atomistic Line Graph Neural Network for Improved Materials Property Predictions.</p>"},{"location":"publications/#jarvis-qc-related","title":"JARVIS-QC related","text":"<p>23. Quantum Computation for Predicting Solids-state Material Properties.</p>"},{"location":"thederivedapps/","title":"Others","text":""},{"location":"thederivedapps/#overview","title":"Overview","text":"<p>Based on the main JARVIS-apps such as JARVIS-DFT, we have developed several derived apps such as JARVIS-WannierTB, and JARVIS-Heterostructure etc. These apps allow to go beyond the existing data in JARVIS and let users obtain predictions on their custom inputs. These apps are based Django and the foundation codes to build these apps are provided at JARVIS-Tools GitHub page.</p>"},{"location":"thederivedapps/#jarvis-wanniertb","title":"JARVIS-WannierTB","text":"<ul> <li>JARVIS-WannierTB provides Wannier Tight binding Hamiltonians and an interface to solve these Hamiltonians for arbitrary k-points on-the-fly. </li> <li>The JARVIS-Wannier tight-binding Hamiltonians were generated for both 3D and 2D materials.</li> <li>We evaluate the accuracy of the WTBHs by comparing the Wannier band structures to directly  calculated DFT band structures on both the set of k-points used in  the Wannierization as well as independent k-points from high symmetry lines.</li> </ul> <p>Table. Number available Wannier TB Hamiltonians.</p> Materials Numbers 3D-bulk 1406 2D-monolayer 365 Total 5097 High/low piezoelectric coeff 1771"},{"location":"thederivedapps/#jarvis-heterostructure","title":"JARVIS-Heterostructure","text":"<ul> <li>JARVIS-Heterostructure provide interface-design app and tools for 2D materials in the JARVIS-DFT database using Zur algorithm and Anderson rule.</li> <li>Some of the properties available are: work function, band-alignment, and heterostructure classification. </li> <li>The band alignment data can be also used for identifying photocatalysts and high-work function 2D-metals for contacts. </li> <li>We validate our results by comparing them to experimental data as well as hybrid-functional predictions.</li> </ul> <p>Table. Types of 2D heterostructures based on Anderson's rule.</p> Type Numbers Type-I (Symmetric) 75744 Type-II (Staggered) 85723 Type-III (Broken) 65312 Total 226779"},{"location":"thederivedapps/#references","title":"References","text":"<ol> <li>Database of Wannier Tight-binding Hamiltonians using High-throughput Density Functional Theory, arXiv:2007.01205</li> <li>Efficient Computational Design of 2D van der Waals Heterostructures: Band-Alignment, Lattice-Mismatch, Web-app Generation and Machine-learning, arXiv:2004.03025.</li> </ol>"},{"location":"thedownloads/","title":"Downloads","text":""},{"location":"thedownloads/#jarvis-dft","title":"JARVIS-DFT","text":""},{"location":"thedownloads/#3d-materials-curated-data","title":"3D-materials curated data","text":"<p>The dataset contains metadata for JARVIS-DFT data for 3D materials.  Property keys include: 'jid', 'atoms', 'formation_energy_peratom', 'optb88vdw_bandgap', 'elastic_tensor','effective_masses_300K', 'kpoint_length_unit', 'encut','optb88vdw_total_energy', 'mbj_bandgap', 'epsx', 'mepsx', 'epsy','mepsy', 'epsz', 'mepsz', 'kpoints_array', 'bulk_modulus_kv', 'shear_modulus_gv', 'modes', 'magmom_outcar','magmom_oszicar', 'icsd', 'spillage', 'slme', 'dfpt_piezo_max_eij','dfpt_piezo_max_dij', 'dfpt_piezo_max_dielectric','dfpt_piezo_max_dielectric_electronic', 'dfpt_piezo_max_dielectric_ionic', 'max_ir_mode', 'min_ir_mode', 'n-Seebeck', 'p-Seebeck', 'exfoliation_energy', 'n-powerfact', 'p-powerfact', 'ehull', 'dfpt_piezo_max_dielectric_ioonic'.</p>"},{"location":"thedownloads/#2d-materials-curated-data","title":"2D-materials curated data","text":"<p>The dataset contains metadata for JARVIS-DFT data for 2D materials.  Similar properties as 3D materials.</p>"},{"location":"thedownloads/#scf-optimization-inputoutput-files","title":"SCF Optimization input/output files","text":"<p>The dataset contains raw input/output files during geometric optmization of crystals. Files included are: POSCAR, INCAR, vasprun.xml, KPOINTS, OSZICAR. Similar files are provided for dataset below.</p>"},{"location":"thedownloads/#optoelectronic-data","title":"Optoelectronic data","text":"<p>The dataset contains raw input/output files for bandgap, DOS, frequency dependent dielctric function of crystals using OptB88vdW functional. </p>"},{"location":"thedownloads/#optb88vdw-optoelectronic-calculation-files","title":"OptB88vdW optoelectronic calculation files","text":"<p>The dataset contains raw input/output files for bandgap, DOS and frequency dependent dielctric function of crystals using TBmBJ potential. </p>"},{"location":"thedownloads/#tbmbj-optoelectronic-calculation-files","title":"TBmBJ optoelectronic calculation files","text":"<p>The dataset contains raw input/output files for bandgap, DOS and frequency dependent dielctric function of crystals using TBmBJ potential. </p>"},{"location":"thedownloads/#finite-difference-elastic-constants-inputoutput-files","title":"Finite Difference Elastic Constants Input/Output files","text":"<p>The dataset contains raw input/output files for finite difference based elastic constant and gamma-point phonon calculations. </p>"},{"location":"thedownloads/#dfpt-raw-inputoutput-files","title":"DFPT raw input/output files","text":"<p>The dataset contains raw input/output files for DFPT based gamma-point phonon and piezoelectric, dielectric calculations. </p>"},{"location":"thedownloads/#computational-scanning-tunneling-microscopy-images","title":"Computational scanning tunneling microscopy images","text":"<p>The dataset contains STM images for 2D materials. </p>"},{"location":"thedownloads/#wannier-tight-binding-hamiltonians","title":"Wannier Tight-binding Hamiltonians","text":"<p>The dataset contains STM Wannier tight binding Hamiltonians for 3D and 2D materials. </p>"},{"location":"thedownloads/#jarvis-ff","title":"JARVIS-FF","text":""},{"location":"thedownloads/#elastic-constants-data","title":"Elastic constants data","text":"<p>The dataset contains elastic constants of materials with several potentials. </p>"},{"location":"thedownloads/#surface-and-vacancy-formation-energies-data","title":"Surface and vacancy-formation energies data","text":"<p>The dataset contains vacancy formation energy of materials with several potentials. </p>"},{"location":"thedownloads/#jarvis-ml","title":"JARVIS-ML","text":""},{"location":"thedownloads/#jarvis-cfid-descriptors-datasets-for-jarvis-dft-mp-oqmd-qm9-aflow","title":"JARVIS-CFID descriptors datasets for JARVIS-DFT, MP, OQMD, QM9, AFLOW","text":"<p>The dataset contains CFID descriptor of materials with several properties. </p>"},{"location":"thedownloads/#data-driven-discovery-of-3d-and-2d-thermoelectric-materials","title":"Data-driven Discovery of 3D and 2D Thermoelectric Materials","text":"<p>The dataset contains thermoelectric properties of 3D and 2D materials</p>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#overview","title":"Overview","text":"<p>This page introduces several tools and dataset in JARVIS though examples. In addition to the following examples, the Colab notebooks and pytests modules can be helpful to  get use JARVIS-DB and JARVIS-Tools.</p>"},{"location":"tutorials/#dft","title":"DFT","text":""},{"location":"tutorials/#running-calculations","title":"Running calculations","text":"<p>The JARVIS-Tools (install using \"pip install -U jarvis-tools\") curretly allows to run DFT calculations with VASP and QE software. The JARVIS-DFT is mainly based on the VASP software but  soon there would be datasets with QE and Wien2K asl well. We can create for example a VaspJob with the help of atomic structure, input parameters, pseudopotential, k-points information. Similar to many other modules VaspJob allows to 'ToDict' and 'FromDict' methods to store or load a complete job, which is very useful in scaling up VASP related calculations and enhancing reproducibilty. Make sure VASP_PSP_DIR is declared as a PATH to VASP pseudopotential directory i.e. export VASP_PSP_DIR=YOUR_PATH_TO_PSUEDOPTENTIALS in your ~/.bashrc file. The input file generation and output file parsing modules for VASP can be found  in jarvis.io.vasp.inputs and jarvis.io.vasp.outputs modules. Example-1: We start by setting up and submitting a single VaspJob:</p> <pre><code>from jarvis.tasks.vasp.vasp import VaspJob, write_vaspjob\nfrom jarvis.io.vasp.inputs import Potcar, Incar, Poscar\nfrom jarvis.db.jsonutils import dumpjson\nfrom jarvis.core.atoms import Atoms\nfrom jarvis.core.kpoints import Kpoints3D\nfrom jarvis.tasks.queue_jobs import Queue\nimport os\n\n# Load/build crystal structure\n# mat = Poscar.from_file('POSCAR')\ncoords = [[0, 0, 0], [0.25, 0.25, 0.25]]\nelements = [\"Si\", \"Si\"]\nbox = [[2.715, 2.715, 0], [0, 2.715, 2.715], [2.715, 0, 2.715]]\natoms = Atoms(lattice_mat=box, coords=coords, elements=elements)\nmat = Poscar(atoms)\nmat.comment = \"Silicon\"\n\n# Build INCAR file\ndata = dict(\n    PREC=\"Accurate\",\n    ISMEAR=0,\n    SIGMA=0.01,\n    IBRION=2,\n    ISIF=3,\n    GGA=\"BO\",\n    PARAM1=0.1833333333,\n    PARAM2=0.2200000000,\n    LUSE_VDW=\".TRUE.\",\n    AGGAC=0.0000,\n    EDIFF=\"1E-7\",\n    EDIFFG=\"-1E-3\",\n    NELM=400,\n    ISPIN=2,\n    LCHARG=\".FALSE.\",\n    LVTOT=\".FALSE.\",\n    LVHAR=\".FALSE.\",\n    LWAVE=\".FALSE.\",\n)\ninc = Incar(data)\n# Build POTCAR info\n# export VASP_PSP_DIR = 'PATH_TO_YOUR_PSP'\npot = Potcar(elements=mat.atoms.elements)\n\n# Build Kpoints info\nkp = Kpoints3D().automatic_length_mesh(\n    lattice_mat=mat.atoms.lattice_mat, length=20\n)\n\nvasp_cmd = \"/users/knc6/VASP/vasp54/src/vasp.5.4.1DobbySOC2/bin/vasp_std\"\ncopy_files = [\"/users/knc6/bin/vdw_kernel.bindat\"]\njobname = \"MAIN-RELAX@JVASP-1002\"\njob = VaspJob(\n    poscar=mat,\n    incar=inc,\n    potcar=pot,\n    kpoints=kp,\n    vasp_cmd=vasp_cmd,\n    copy_files=copy_files,\n    jobname=jobname,\n)\n\ndumpjson(data=job.to_dict(), filename=\"job.json\")\nwrite_vaspjob(pyname=\"job.py\", job_json=\"job.json\")\n\n\n</code></pre> <p>The job.py can now be run on a cluster or on a PC as a python script. For running this job on a PBS cluster,</p> <pre><code>submit_cmd = [\"qsub\", \"submit_job\"]\n# Example job commands, need to change based on your cluster\njob_line = (\n    \"source activate my_jarvis \\n\"\n    + \"python job.py\"\n)\nname = \"TestJob\"\ndirectory = os.getcwd()\nQueue.pbs(\n    job_line=job_line,\n    jobname=name,\n    directory=directory,\n    submit_cmd=submit_cmd,\n    )\n\n\n</code></pre> <p>Currently, JARVIS-Tools can be used to submit job with SLURM and PBS clusters only. For high-throughput automated submissions one can use pre-build JobFactory module that allows automatic calculations for a series of properties. Example-2:</p> <pre><code>\nfrom jarvis.tasks.vasp.vasp import VaspJob,write_jobfact_optb88vdw\nfrom jarvis.io.vasp.inputs import Potcar, Incar, Poscar\nfrom jarvis.db.jsonutils import dumpjson\nfrom jarvis.core.atoms import Atoms\nfrom jarvis.core.kpoints import Kpoints3D\nfrom jarvis.tasks.queue_jobs import Queue\nimport os\nfrom jarvis.tasks.vasp.vasp import JobFactory,write_jobfact_optb88vdw\n\n# Load/build crystal structure\n# mat = Poscar.from_file('POSCAR')\ncoords = [[0, 0, 0], [0.25, 0.25, 0.25]]\nelements = [\"Si\", \"Si\"]\nbox = [[2.715, 2.715, 0], [0, 2.715, 2.715], [2.715, 0, 2.715]]\natoms = Atoms(lattice_mat=box, coords=coords, elements=elements)\nmat = Poscar(atoms)\nmat.comment = 'bulk@Silicon'\n\nvasp_cmd = \"/users/knc6/VASP/vasp54/src/vasp.5.4.1DobbySOC2/bin/vasp_std\"\ncopy_files = ['/users/knc6/bin/vdw_kernel.bindat']\njobname = \"MAIN-RELAX@JVASP-1002\"\njob = JobFactory(\n    vasp_cmd=vasp_cmd,\n    poscar=mat,\n    copy_files=copy_files,\n)\n\ndumpjson(data=job.to_dict(), filename='job_fact.json')\nwrite_jobfact_optb88vdw(pyname=\"job_fact.py\", job_json=\"job_fact.json\")\n\n</code></pre> <p>We can now submit the JobFactory as:</p> <pre><code>from jarvis.tasks.queue_jobs import Queue\nimport os\nsubmit_cmd=[\"qsub\", \"submit_job\"]\n# Example job commands, need to change based on your cluster\njob_line = \"source activate my_jarvis \\n\"+\"python job_fact.py\"\nname = \"TestJob\"\ndirectory = os.getcwd()\nQueue.pbs(\n    job_line=job_line,\n    jobname=name,\n    directory=directory,\n    submit_cmd=submit_cmd,\n)\n\n\n</code></pre> <p>This script first converges K-pints and plane-wave cutoff, then using the converged paramerters optimizes the simulation cell, and then runs several jobs for calculating properties such as  bandstructure on high-symmetry k-points, elastic constanats, optoelectronic properties etc.</p> <p>Next, let's see how to run High-throughput jobs for multiple IDs: Example-3:</p> <pre><code>from jarvis.tasks.vasp.vasp import (\n    JobFactory,\n    VaspJob,\n    GenericIncars,\n    write_jobfact,\n)\nfrom jarvis.io.vasp.inputs import Potcar, Incar, Poscar\nfrom jarvis.db.jsonutils import dumpjson\nfrom jarvis.db.figshare import data\nfrom jarvis.core.atoms import Atoms\nfrom jarvis.tasks.queue_jobs import Queue\nimport os\n\n##############################################################################\n# Make sure you have latest version of jarvis-tools, pip install -U jarvis-tools\n# Specify your vasp_cmdcluster type etc. info here\n# VASP_PSP_DIR should be defined in the PATH as pseudopotential directory\n\nvasp_cmd = \"mpirun /users/knc6/VASP/vasp54/src/vasp.5.4.1DobbySOC2/bin/vasp_std\"\n\n# Change to your path of .bindat file\ncopy_files = [\"/users/knc6/bin/vdw_kernel.bindat\"]\n\nsubmit_cmd = [\"qsub\", \"submit_job\"]\n\n# For slurm\n# submit_cmd = [\"sbatch\", \"submit_job\"]\n##############################################################################\ndef get_atoms(jid=\"\", mpid=\"\", oqmd_id=\"\", aflow_id=\"\"):\n    \"\"\"\n    Provide only one of these IDs.\n    Examples:\n    jid='JVASP-1002' or mpid='mp-149' or\n    oqmd_id='10215', or aflow_id='48708a4622918820'\n    \"\"\"\n    if mpid != \"\":\n        mp = data(\"mp_3d\")\n        for i in mp:\n            if i[\"id\"] == mpid:\n                atoms = Atoms.from_dict(i[\"atoms\"])\n                del mp\n                return atoms\n    if jid != \"\":\n        jv = data(\"dft_3d\")\n        for i in jv:\n            if i[\"jid\"] == jid:\n                atoms = Atoms.from_dict(i[\"atoms\"])\n                del jv\n                return atoms\n    if oqmd_id != \"\":\n        oq = data(\"oqmd_3d\")\n        for i in oq:\n            if i[\"id\"] == oqmd_id:\n                atoms = Atoms.from_dict(i[\"atoms\"])\n                del oq\n                return atoms\n    if aflow_id != \"\":\n        af1 = data(\"aflow1\")\n        for i in af1:\n            if i[\"id\"] == aflow_id:\n                atoms = Atoms.from_dict(i[\"atoms\"])\n                del af1\n                return atoms\n        af2 = data(\"aflow2\")\n        for i in af2:\n            if i[\"id\"] == aflow_id:\n                atoms = Atoms.from_dict(i[\"atoms\"])\n                del af2\n                return atoms\n\n\n# If a user wants to run on its on ,aterials\n# atoms = Poscar.from_file('YourPOSCAR')\n# and send it to atoms in the script below\n# Select/desect you want to run\n# More detais in\n# https://github.com/usnistgov/jarvis/blob/master/jarvis/tasks/vasp/vasp.py#L81\nsteps = [\n    \"ENCUT\",\n    \"KPLEN\",\n    \"RELAX\",\n    \"BANDSTRUCT\",\n    \"LOPTICS\",\n    \"MBJOPTICS\",\n    \"ELASTIC\",\n]\nincs = GenericIncars().optb88vdw().incar.to_dict()\n\n\n# List of materials divided into chunks of 50\n\n\nids = [\"JVASP-1002\", \"JVASP-1067\"]\n\n\nfor id in ids:\n    atoms = get_atoms(jid=id)\n    mat = Poscar(atoms)\n    mat.comment = \"bulk@\" + str(id)\n    cwd_home = os.getcwd()\n    dir_name = id + \"_\" + str(\"PBEBO\")\n    if not os.path.exists(dir_name):\n        os.makedirs(dir_name)\n    os.chdir(dir_name)\n    job = JobFactory(\n        vasp_cmd=vasp_cmd,\n        poscar=mat,\n        steps=steps,\n        copy_files=copy_files,\n        use_incar_dict=incs,\n    )\n\n    dumpjson(data=job.to_dict(), filename=\"job_fact.json\")\n    write_jobfact(\n        pyname=\"job_fact.py\",\n        job_json=\"job_fact.json\",\n        input_arg=\"v.step_flow()\",\n    )\n\n    # Example job commands, need to change based on your cluster\n    job_line = (\n        \"source ~/anaconda2/envs/my_jarvis/bin/activate my_jarvis \\n\"\n        + \"python job_fact.py\"\n    )\n    name = id\n    directory = os.getcwd()\n    Queue.pbs(\n        job_line=job_line,\n        jobname=name,\n        directory=directory,\n        submit_cmd=submit_cmd,\n    )\n    os.chdir(cwd_home)\n\n    \"\"\"\n    # For Slurm clusters\n    Queue.slurm(\n        job_line=job_line,\n        jobname=name,\n        directory=directory,\n        submit_cmd=submit_cmd,\n    )\n    os.chdir(cwd_home)\n    \"\"\"\n\n</code></pre> <p>In the above examples, use Queue.slurm if you want to use SLURM instead of TORQUE/PBS submission. A complete example of such run is available at: VASP example</p>"},{"location":"tutorials/#post-processing-and-plotting","title":"Post-processing and plotting","text":"<p>There are a variety of post-processing analysis and plotting that can be done on the output data. A common example would be plotting electronic density of states and bandstructure as follows:</p> <pre><code>from jarvis.io.vasp.outputs import Vasprun\n# %matplotlib inline\nimport matplotlib.pyplot as plt\nplt.switch_backend('agg')\nvrun = Vasprun('vasprun.xml')\nenergies, spin_up, spin_dn=vrun.total_dos\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 22})\nplt.plot(energies,spin_up,label='Spin-up')\nplt.plot(energies,spin_dn,label='Spin-down')\nplt.xlabel('Energy(E-Ef)')\nplt.ylabel('DOS(arb.unit)')\nplt.xlim(-4,4)\nplt.legend()\n\nvrun.get_bandstructure(kpoints_file_path='KPOINTS')\n</code></pre> <p>There are many other analysis modules available such as: scanning tunneling microscopy images, solar-cell efficiency, topological spin- orbit spillage, transport properties, phonons, infrared intensities, and its continously expanding.</p>"},{"location":"tutorials/#developing-database","title":"Developing database","text":"<p>After generating the results, we can store the metadata in JARVIS-API. Please request an account if you haven't made it yet. Following the calculation protocal mentioned above, the generated files can be converted to an XML datafile which with the help of an XSD schema can be converted to nice-looking HTML files with the help of XSLT programming and a bit of javascript.</p> <p>We alreay provide modules to convert the calculation informato to XML and module to upload data. An example is give below:</p> <pre><code>from jarvis.db.vasp_to_xml import VaspToApiXmlSchema \nfrom jarvis.db.restapi import Api\nfolder=\"/home/users/knc6/Software/jarvis/jarvis/examples/vasp/SiOptB88vdW\"\nfilename = \"JVASP-1002.xml\"\nVaspToApiXmlSchema(folder=folder).write_xml(filename=filename)\na = Api(user_info_file_path=\"/users/knc6/myinfo\")\n# First line should be your username and secondline your password\ntid=\"5f626925ece4b00035e5277f\"\n# Find latest template ID with title \"jarvisdft\"  at the bottom of the page \n# https://jarvis.nist.gov/rest/template-version-manager/global\na.upload_xml_file(filename='JVASP-1067.xml',template_id=tid)\n</code></pre>"},{"location":"tutorials/#ff","title":"FF","text":"<p>Molecular dynamics/classical force-field calculations can be carried out with LAMMPS software as in JARVIS-FF. An example for running LAMMPS is given below. Here, a LammpsJob module is defined with the help of  atoms, pair-style, coefficient, and template file (*.mod file) to control the calculations.</p>"},{"location":"tutorials/#running-calculations_1","title":"Running calculations","text":"<pre><code>from jarvis.tasks.lammps.lammps import LammpsJob, JobFactory\nfrom jarvis.core.atoms import Atoms\nfrom jarvis.db.figshare import get_jid_data\nfrom jarvis.analysis.structure.spacegroup import Spacegroup3D\n\n\n# atoms = Atoms.from_poscar('POSCAR')\n# Get Aluminum FCC\ntmp_dict = get_jid_data(jid=\"JVASP-816\", dataset=\"dft_3d\")[\"atoms\"]\natoms = Atoms.from_dict(tmp_dict)\n# Get conventional cell\nspg = Spacegroup3D(atoms)\ncvn_atoms = spg.conventional_standard_structure\nff = \"/users/knc6/Software/LAMMPS/lammps-master/potentials/Al_zhou.eam.alloy\"\nmod = \"/users/knc6/Software/Devs/jarvis/jarvis/tasks/lammps/templates/inelast.mod\"\ncmd = \"/users/knc6/Software/LAMMPS/lammps-master/src/lmp_serial&lt;in.main&gt;out\"\nparameters = {\n    \"pair_style\": \"eam/alloy\",\n    \"pair_coeff\": ff,\n    \"atom_style\": \"charge\",\n    \"control_file\": mod,\n}\n# Test LammpsJob\nlmp = LammpsJob(\n    atoms=cvn_atoms, parameters=parameters, lammps_cmd=cmd, jobname=\"Test\"\n).runjob()\n\n# Test high-throughput\njob_fact = JobFactory(pair_style=\"eam/alloy\", name=\"my_first_lammps_run\")\njob_fact.all_props_eam_alloy(atoms=cvn_atoms, ff_path=ff, lammps_cmd=cmd)\n</code></pre> <p>The above lines can be written on a file such as job.py and can be run on a PC or a cluster with the from jarvis.tasks.queue_jobs import Queue module.</p>"},{"location":"tutorials/#post-processing-and-plotting_1","title":"Post-processing and plotting","text":"<p>Important quantities such asn total energy, forces etc. can be obtained with the help of jarvis.io.lammps.outputs module. </p> <pre><code>from jarvis.io.lammps.outputs import parse_material_calculation_folder\nfolder = '/home/users/knc6/Software/jarvis/jarvis/examples/lammps/Aleam'\ndata = parse_material_calculation_folder(folder)\n</code></pre>"},{"location":"tutorials/#developing-database_1","title":"Developing database","text":"<p>The calculation data can now be converted into XML files as follows:</p> <pre><code>from jarvis.db.lammps_to_xml import write_xml\nwrite_xml(data=data,filename='lmp.xml')\n</code></pre>"},{"location":"tutorials/#mlai","title":"ML/AI","text":"<p>Currently JARVIS-ML allows prediction of material properties with machine learning. The materials information is converted into descriptors using Classical Force-field Inspired Descriptors (CFID) or Coulomb materix. Other descriptors and graph based predictions would be available soon also. For a series of atomistic structures, we can convert them into CFID, which act as input matrix.</p>"},{"location":"tutorials/#running-calculations_2","title":"Running calculations","text":"<p>Suppose we have 40000 materials, and we get 1557 descriptor for each material, we will have a  40000x1557 matrix. Let's call this matrix as 'x' or input matrix. Next, we can get target ('y') data either from DFT, FF calculations or experiments. For example, we can choose formation energies of 40000 materials in the JARVIS-DFT as the dtarget data giving 40000x1 matrix.</p> <p>Now, we can use a ML/AI algorithm to establish statistical relation between the x and y data. Once trained we get a trained model, which can be stored in say pickle or joblib format.</p> <p>For a new material now, it can be converted into CFID i.e. 1x1557 matrix which when fed to the model will give 1x1 prediction hence the ML prediction. We can use a range of ML algorithms such as  linear regression, decision trees, Gaussian processes etc. We find with CFID descriptors, gradient boosting decision trees (especially in LightGBM) gives one of the most accurate results.  We provide tools to run with major ML packages such as scikit-learn, tensorflow, pytorch, lightgbm etc. Example-1:</p> <pre><code># An example of JARVIS-ML training\nfrom jarvis.ai.pkgs.utils import get_ml_data\nfrom jarvis.ai.pkgs.utils import regr_scores\nX,y,jid=get_ml_data()\n#Formation energy for 3D materials, you can choose other properties/dataset as well\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nlgbm = lgb.LGBMRegressor(device= 'gpu',n_estimators= 1170,learning_rate= 0.15375236057119931,num_leaves= 273)       \nX_train, X_test, y_train, y_test, jid_train, jid_test = train_test_split(X, y, jid, random_state=1, test_size=.1)\nlgbm.fit(X_train,y_train)\npred = lgbm.predict(X_test)\nreg_sc = regr_scores(y_test, pred)\nprint (reg_sc['mae'])\n\n</code></pre> <p>Another full example for regression Example-2:</p> <pre><code>from jarvis.ai.pkgs.lgbm.regression import parameters_dict\nfrom scipy.stats import median_absolute_deviation as mad\nfrom jarvis.ai.pkgs.utils import get_ml_data\nimport lightgbm as lgb\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom jarvis.ai.pkgs.utils import regr_scores\nimport joblib\n# Some of the previously found hyper-parameters\nparams = parameters_dict()\n\nprint(params)\n\n\nmem = []\nfor i, j in params.items():\n    name = str(i) + \".pkl\"\n    print(i)\n    print(name)\n    X, y, jid = get_ml_data(dataset=\"cfid_3d\", ml_property=i)\n    lgbm = lgb.LGBMRegressor(\n        n_estimators=j[\"n_estimators\"],\n        learning_rate=j[\"learning_rate\"],\n        num_leaves=j[\"num_leaves\"],\n    )\n    if \"eps\" in i:  # fit refractive index, not dielectric constant\n        y = np.sqrt(y)\n    X_train, X_test, y_train, y_test, jid_train, jid_test = train_test_split(\n        X, y, jid, random_state=1, test_size=0.1\n    )\n    lgbm.fit(X_train, y_train)\n    pred = lgbm.predict(X_test)\n    joblib.dump(lgbm, name)\n    reg_sc = regr_scores(y_test, pred)\n    mae = reg_sc[\"mae\"]  # mean absolute error\n    madev = mad(y)  # mean absolute deviation\n    # mae_over_madev=float(mae)/float(madev)\n    mem.append([i, len(X), mae, madev])\n    print(\"Property,Length, MAE,MAD\", i, len(X), mae, madev)\n    print()\n    print()\n</code></pre>"},{"location":"tutorials/#post-processing-and-plotting_2","title":"Post-processing and plotting","text":"<p>We can analyze basic ML metrics such as mean-absolute erros (MAE),  RMSE, R2 etc. for regression and ROC AUC, F1 score etc. for classification models. </p> <pre><code>from jarvis.ai.pkgs.sklearn.regression import regression\nfrom jarvis.ai.pkgs.sklearn.classification import classification\nfrom jarvis.ai.pkgs.sklearn.hyper_params import (\n    classification_regression_params,\n)\nfrom jarvis.ai.pkgs.utils import get_ml_data, binary_class_dat\nfrom jarvis.ai.pkgs.lgbm.regression import regression as l_regression\nfrom jarvis.ai.pkgs.lgbm.regression import parameters_dict as l_params\nfrom jarvis.ai.pkgs.lgbm.classification import (\n    classification as l_classification,\n)\nfrom jarvis.ai.descriptors.cfid import feat_names\nfrom lightgbm import LGBMClassifier\nimport matplotlib.pyplot as plt\nproperty = \"exfoliation_energy\"\nX, Y, jid = get_ml_data(dataset=\"cfid_3d\", ml_property=property)\n\n# Regression\nparams = l_params()[property]\nnames = feat_names()\ninfo = l_regression(\n    X=X,\n    Y=Y,\n    jid=jid,\n    config=params,\n    feat_names=names,\n    plot=True,\n    save_model=True,\n)\n\n# Classification\nproperty = \"exfoliation_energy\"\ntol = 100\nmodels = [LGBMClassifier(n_estimators=10, num_leaves=2)]\ninfo = l_classification(\n    X=X,\n    Y=Y,\n    plot=True,\n    models=models,\n    preprocess=True,\n    save_model=True,\n    tol=tol,\n)\n</code></pre>"},{"location":"tutorials/#developing-database_2","title":"Developing database","text":"<p>The ML models in terms of joblib, pickle parameters, the descriptors sets and ML predicted properties can be stored in teh JARVIS-API. The descriptrs and the predicted properties can be stored as XML files , while the joblib and pickle files can be saved a blob binary files.</p>"}]}